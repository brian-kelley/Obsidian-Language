TODO:
---------------------
-Unified name searching
  -Prevent name collision across multiple kinds of things (no overloading yet, but later)
-Actually make sure (in Subroutine) that the target of Assign statements in functions are in function scope
-Make sure that types are never recursive
  -depth-first search through members (applies to structs, arrays and tuples)
-Make sure alias types don't alias themselves
-rename char to byte and uchar to ubyte, and make new type char that is always an ASCII character (later UTF-8)
-array creation expression: array type[a][b]...? (make array a keyword)
-C backend: need to track value lifetimes
  -Functions should all take primitives by value and string/all other types by pointer
  -malloc and free for array creations
    -make sure leaks are impossible
  -index expressions for multi-dimensional arrays
  -for now, always generate runtime bounds checking (make segfaults impossible)

---------------------

LANGUAGE BUILT-IN MODULES (all must be fully cross-platform - "just work" with a clean Onyx installation):
  -Term (stdin/stdout/formatting/parsing, commands)
  -Sys (File I/O, filesystem, sockets, time)
  -Modern OpenGL, plus some nice utilties, like:
    -GLM-style math
    -OBJ model loading
    -Shader utilities
    -Mesh utilities (loading, saving, refinement, decimation)
  -Font rendering (full TrueType/Unicode support)
  -Input (keyboard, mouse, gamepad - portable across all machines)
  -UI (nice libUI interface, or something similar from scratch?)
  -OpenAL (audio)
  -zlib (compression)
  -Graphs (nice data structure, shortest path, finding cycles, reachability, etc)

