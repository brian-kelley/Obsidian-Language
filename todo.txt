---------------------
      TODO:
---------------------
-Unified name searching
  -Prevent name collision across multiple kinds of things (no overloading yet, but later)
-Actually make sure (in Subroutine) that the target of Assign statements in functions are in function scope (no side effects)
-Make sure that types are never recursive
  -depth-first search through members (applies to structs, arrays and tuples)
-Make sure alias types don't alias themselves
-C backend: need to track value lifetimes
  -Functions should all take primitives by value and string/all other types by pointer
    -In middle end, keep track of which arguments get modified inside each subroutine
  -malloc and free for array creations
    -make sure leaks are impossible
    -assigning to an array always frees existing dest array
    -all arrays in scope are freed at end of scope
  -NO SEGFAULTS
    -in debug (default for now) build, runtime bounds checking for arrays (segfaults impossible)
    -graceful program exit with error message for allocation failure

------------------------------
  DATA DEPENDENCY TRACKING:
------------------------------
-Expressions are temporary unless they are variables, members or indices of variables
  -so data dependencies only matter for variables

---------------------
    Much later:
---------------------
LANGUAGE BUILT-IN MODULES (all must be fully cross-platform - "just work" with a clean Onyx installation):
  -Term (stdin/stdout/formatting/parsing, commands)
  -Sys (File I/O, filesystem, sockets, time)
  -Modern OpenGL, plus some nice utilties, like:
    -GLM-style math
    -OBJ model loading
    -Shader utilities
    -Mesh utilities (loading, saving, refinement, decimation)
  -Font rendering (full TrueType/Unicode support)
  -Input (keyboard, mouse, gamepad - portable across all machines)
  -UI (nice libUI interface, or something similar from scratch?)
  -OpenAL (audio)
  -zlib (compression)
  -Graphs (nice data structure, shortest path, finding cycles, reachability, etc)

