---------------------
      TODO:
---------------------
-Allow subroutine overloading
-Calling with union argument will dispatch at runtime to the correct version for runtime contents
  -UNLESS the subroutine is defined for the exact union
  -Look for exact matches in type, then take the first where arguments are convertible (if none, error as no matching subroutine to call like C++)
-Make everything a pointer
  -argument passing and shallow copies are much cheaper 
  -Makes implementing maps a lot easier: comparison can be casted to bool(void*, void*) and hash is uint64_t(void*)

-----------------------------------
   After core language compiler:
-----------------------------------
LANGUAGE BUILT-IN MODULES (all must be fully cross-platform and absolutely need to just work:
  -Term (stdin/stdout/formatting/parsing, commands)
  -Sys (File I/O, filesystem, sockets, time)
  -Modern OpenGL (4.1+), plus some nice utilties, like:
    -GLM-style math
    -OBJ model loading
    -Shader utilities
    -Mesh utilities (half-edge structure, loading, saving)
  -Native font rendering (Unicode support, antialiasing)
  -Input (keyboard, mouse, gamepad - portable across all machines)
    -Want to be able to poll for events like SDL,
     check for button states directly, and set up callbacks
  -UI (nice libUI interface, or something similar from scratch?)
  -Native audio wrapper
  -Compression (also use for serialization): zlib?
  -Graphs (nice data structure, Dijkstra's, Kosaraju's, topological sort, MST)
  -Support some video and audio codecs through free libraries (ffmpeg? lame?)

