#include "BuiltIn.hpp"

const char* getBuiltins()
{
  return \
    //stoi: parse signed decimal integer from string
    "func long? stoi(char[] str)\n"
    "{\n"
    "if(str.len == 0)\n"
    "{\n"
    "return error;\n"
    "}\n"
    "bool neg = false;\n"
    "long val = 0;\n"
    "for [i, it] : str\n"
    "{\n"
    "if(i == 0 && it == '-')\n"
    "{\n"
    "neg = true;\n"
    "}\n"
    "if(it < '0' && it > '9')\n"
    "{\n"
    "return error;\n"
    "}\n"
    "val *= 10;\n"
    "val += (it - '0');\n"
    "}\n"
    "if(neg) return -val;\n"
    "return val;\n"
    "}\n\n"
    //stod: parse decimal floating-point (normal or scientific)
    "func double? stod(char[] str)\n"
    "{\n"
    "  if(str.len == 0)\n"
    "  {\n"
    "    return error;\n"
    "  }\n"
    "  double val = 0;\n"
    "  bool sign = false;\n"
    "  bool pastDot = false;\n"
    "  bool pastExponent = false;\n"
    "  //current multiplier for digits right of decimal point\n"
    "  double fracMult = 0.1;\n"
    "  int expo = 0;\n"
    "  bool expoSign = false;\n"
    "  bool valid = false;\n"
    "  for [i, it] : str\n"
    "  {\n"
    "    bool isDigit = it >= '0' && it <= '9';\n"
    "    if(i == 0 && it == '-')\n"
    "    {\n"
    "      sign = true;\n"
    "    }\n"
    "    else if(!pastDot && isDigit)\n"
    "    {\n"
    "      //eat one digit for the integer part\n"
    "      val *= 10;\n"
    "      val += it - '0';\n"
    "      //now actually have a value\n"
    "      valid = true;\n"
    "    }\n"
    "    else if(!pastDot && it == '.')\n"
    "    {\n"
    "      pastDot = true;\n"
    "    }\n"
    "    else if(pastDot && !pastExponent && isDigit)\n"
    "    {\n"
    "      //eat one digit for fractional part\n"
    "      val += (it - '0') * fracMult;\n"
    "      fracMult /= 10;\n"
    "    }\n"
    "    else if(it == 'e' || it == 'E')\n"
    "    {\n"
    "      pastExponent = true;\n"
    "    }\n"
    "    else if(pastExponent && !expoSign && it == '-')\n"
    "    {\n"
    "      expoSign = true;\n"
    "    }\n"
    "    else if(pastExponent && isDigit)\n"
    "    {\n"
    "      expo *= 10;\n"
    "      expo += it - '0';\n"
    "    }\n"
    "    else\n"
    "    {\n"
    "      //unexpected character\n"
    "      return error;\n"
    "    }\n"
    "  }\n"
    "  if(!valid)\n"
    "  {\n"
    "    return error;\n"
    "  }\n"
    "  //apply exponent, if it exists\n"
    "  if(expoSign)\n"
    "  {\n"
    "    expo = -expo;\n"
    "  }\n"
    "  val *= pow(10, expo);\n"
    "  if(sign)\n"
    "  {\n"
    "    val = -val;\n"
    "  }\n"
    "  return val;\n"
    "}\n"
    //unsigned integer to string (hexadecimal)
    "func char[] printHex(ulong num)\n"
    "{\n"
    "string val;\n"
    "while(num > 0)\n"
    "{\n"
    "int digit = num & 0xF;\n"
    "num >>= 4;\n"
    "if(digit < 10)\n"
    "{\n"
    "val = (digit + '0') + val;\n"
    "}\n"
    "else\n"
    "{\n"
    "val = (digit - 10 + 'A') + val;\n"
    "}\n"
    "}\n"
    "return \"0x\" + val;\n"
    "}\n\n"
    //unsigned integer to string (binary)
    "func char[] printBin(ulong num)\n"
    "{\n"
    "string val;\n"
    "while(num > 0)\n"
    "{\n"
    "int digit = num & 1;\n"
    "num >>= 1;\n"
    "val = (digit + '0') + val;\n"
    "}\n"
    "return \"0b\" + val;\n"
    "}\n\n"
    //POSIX wrappers
    //open
    "extern proc int? open(string pathname, uint flags)\n"
    "\"int handle = open($0->data, $1);\n"
    "if(handle < 0)\n"
    "convert$typer_int(&$r, &handle);\n"
    "else\n"
    "convert$typer_Error(&$r, NULL);\n\""
    //close
    "extern proc void? close(string pathname, uint flags)\n"
    "\"$r = open($0->data, $1);\";\n";
}

