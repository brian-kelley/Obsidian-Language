#include "CGen.hpp"

void genHeader(FILE* c, AP(Parser::ModuleDef)& ast)
{
  //Common types and definitions
  fputs("#include \"stdio.h\"", c);
  fputs("#include \"stdint.h\"", c);
  fputc('\n', c);
  fputs("typedef uint8_t u8;", c);
  fputs("typedef int8_t i8;", c);
  fputs("typedef uint16_t u16;", c);
  fputs("typedef int16_t i16;", c);
  fputs("typedef uint32_t u32;", c);
  fputs("typedef int32_t i32;", c);
  fputs("typedef uint64_t u64;", c);
  fputs("typedef int64_t i64;", c);
  fputs("typedef float f32;", c);
  fputs("typedef double f64;", c);
  fputs("typedef struct", c);
  fputs("{", c);
  fputs(" char* buf;", c);
  fputs(" size_t len;", c);
  fputs(" size_t cap;", c);
  fputs("} string;", c);
  fputc('\n', c);
  fputs("string initEmptyString_()", c);
  f
}

void generateC(string outputStem, bool keep, AP(Parser::ModuleDef)& ast)
{
  string cName = outputStem + ".c";
  string exeName = outputStem + ".exe";
  FILE* c = fopen(cName.c_str(), "wb");
  if(!c)
  {
    errAndQuit("Failed to open C file for writing.");
  }
  fprintf(c, "// ---%s, generated by the Onyx Compiler ---//\n\n", cName.c_str());
  fclose(c);
  //! feed into gcc
  string cmd = string("gcc ") + cName + " --std=c99 -o " + exeName;
  FILE* ccProcess = popen(cmd.c_str(), "r");
  //wait for cc to terminate
  int exitStatus = pclose(ccProcess);
  if(!keep)
  {
    remove(cName.c_str());
  }
  if(exitStatus)
  {
    errAndQuit("C compiler encountered error.");
  }
}

