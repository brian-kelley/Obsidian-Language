#include "C_Backend.hpp"
#include <utility>

using namespace TypeSystem;
using std::pair;

map<Type*, string> types;
map<Type*, bool> typesImplemented;
map<Subroutine*, string> subrs;
map<Variable*, string> vars;

//The sets of types where util functions have been implemented
set<Type*> initImpl;
set<Type*> copyImpl;
set<Type*> allocImpl;
set<Type*> deallocImpl;
set<Type*> printImpl;
set<pair<Type*, Type*>> convertImpl;
set<Type*> equalsImpl;
set<Type*> lessImpl;
set<ArrayType*> concatImpl;
set<ArrayType*> prependImpl;
set<ArrayType*> appendImpl;

map<Type*, bool> needsDealloc;   //whether each type needs a non-trivial deallocator
size_t identCount;
ofstream c;
//different stringstreams to build the C file (in this order)
Oss typeDecls;      //all typedefs (including forward-declarations as necessary)
Oss varDecls;       //all global/static variables
Oss utilFuncDecls;  //util functions are print, array creation, deep copy, etc
Oss utilFuncDefs;
Oss funcDecls;      //the actual subroutines in the onyx program
Oss funcDefs;

namespace Context
{
  map<Switch*, string> switchBreakLabels;
  map<For*, string> forBreakLabels;
}

//The C type to use for array sizes/indices
const char* size_type = "uint32_t";

namespace C
{
  void generate(string outputStem, bool keep)
  {
    cout << "Starting C backend.\n";
    string cName = outputStem + ".c";
    string exeName = outputStem + ".exe";
    typeDecls = Oss();
    varDecls = Oss();
    utilFuncDecls = Oss();
    utilFuncDefs = Oss();
    funcDecls = Oss();
    funcDefs = Oss();
    cout << "  > Generating type declarations\n";
    generateSectionHeader(typeDecls, "Type Decls");
    genTypeDecls();
    cout << "  > Generating global variables\n";
    generateSectionHeader(varDecls, "Global Variables");
    genGlobals();
    cout << "  > Generating Onyx subroutines\n";
    generateSectionHeader(funcDecls, "Functions and Procedures");
    generateSectionHeader(funcDefs, "Functions and Procedures");
    genSubroutines();
    generateSectionHeader(utilFuncDecls, "Internal functions");
    generateSectionHeader(utilFuncDefs, "Internal functions");
    c = ofstream(cName);
    c << "//--- " << outputStem << ".c, generated by the Onyx Compiler ---//\n\n";
    //genCommon writes directly to the c stream
    genCommon();
    //write types, vars, func decls, func defs in the ostringstreams
    c.write(typeDecls.str().c_str(), typeDecls.tellp());
    c << "\n\n";
    c.write(varDecls.str().c_str(), varDecls.tellp());
    c << "\n\n";
    c.write(utilFuncDecls.str().c_str(), utilFuncDecls.tellp());
    c << "\n\n";
    c.write(utilFuncDefs.str().c_str(), utilFuncDefs.tellp());
    c << "\n\n";
    c.write(funcDecls.str().c_str(), funcDecls.tellp());
    c << "\n\n";
    c.write(funcDefs.str().c_str(), funcDefs.tellp());
    c << '\n';
    cout << "  > Done, wrote " << c.tellp() << " bytes of C source code\n";
    c.close();
    //wait for cc to terminate
    bool smallBin = false;
    bool compileSuccess = false;
    if(smallBin)
    {
      compileSuccess = runCommand(string("gcc") + " --std=c99 -Os -ffast-math -fassociative-math -o " + exeName + ' ' + cName + " &> /dev/null");
      //shrink binary some more (no need for symbol names)
      runCommand(string("gstrip --strip-all ") + exeName);
    }
    else
    {
      compileSuccess = runCommand(string("gcc") + " --std=c99 -ffast-math -fassociative-math -o " + exeName + ' ' + cName + " &> /dev/null");
    }
    if(!keep)
    {
      remove(cName.c_str());
    }
    if(!compileSuccess)
    {
      ERR_MSG("C compiler encountered error.");
    }
  }

  void genCommon()
  {
    c << "#include \"stdio.h\"\n";
    c << "#include \"stdlib.h\"\n";
    c << "#include \"math.h\"\n";
    c << "#include \"string.h\"\n";
    c << "#include \"stdint.h\"\n";
    c << "#include \"stdbool.h\"\n";
    c << '\n';
    c << "char* strdup_(const char* str) \n";
    c << "{\n";
    c << "char* temp = malloc(1 + strlen(str)); \n";
    c << "strcpy(temp, str);\n";
    c << "return temp;\n";
    c << "}\n\n";
    c << "void panic_(const char* why_) \n";
    c << "{\n";
    c << "fprintf(stderr, \"%s\\n\", why_);\n";
    c << "exit(1);\n";
    c << "}\n\n";
  }

  void genTypeDecls()
  {
    //A list of all types
    vector<Type*> allTypes;
    for(auto prim : TypeSystem::primitives)
    {
      allTypes.push_back(prim);
    }
    //add all scoped types
    walkScopeTree([&] (Scope* s) -> void
      {
        for(auto& t : s->names)
        {
          switch(t.second.kind)
          {
            //don't process TYPEDEF here because aliases
            //are never used directly in the IR
            case Name::STRUCT:
            case Name::BOUNDED_TYPE:
            case Name::ENUM:
              allTypes.push_back((Type*) t.second.item);
              break;
            default:;
          }
        }
      });
    //add all non-scoped types
    for(auto tt : TypeSystem::tuples)
    {
      allTypes.push_back(tt);
    }
    for(auto ut : TypeSystem::unions)
    {
      allTypes.push_back(ut);
    }
    for(auto mt : TypeSystem::maps)
    {
      allTypes.push_back(mt);
    }
    for(auto at : TypeSystem::arrays)
    {
      allTypes.push_back(at);
    }
    for(auto bt : TypeSystem::boundedTypes)
    {
      //bounded types are implemented as void*
      typesImplemented[bt] = true;
      types[bt] = "void*";
    }
    for(auto ct : TypeSystem::callables)
    {
      allTypes.push_back(ct);
    }
    //primitives (string is a struct, all others are C primitives)
    types[TypeSystem::primNames["void"]] = "void";
    types[TypeSystem::primNames["bool"]] = "bool";
    types[TypeSystem::primNames["char"]] = "char";
    types[TypeSystem::primNames["byte"]] = "int8_t";
    types[TypeSystem::primNames["ubyte"]] = "uint8_t";
    types[TypeSystem::primNames["short"]] = "int16_t";
    types[TypeSystem::primNames["ushort"]] = "uint16_t";
    types[TypeSystem::primNames["int"]] = "int32_t";
    types[TypeSystem::primNames["uint"]] = "uint32_t";
    types[TypeSystem::primNames["long"]] = "int64_t";
    types[TypeSystem::primNames["ulong"]] = "uint64_t";
    types[TypeSystem::primNames["float"]] = "float";
    types[TypeSystem::primNames["double"]] = "double";
    //forward-declare all compound types (callable types aren't compound)
    for(auto t : allTypes)
    {
      if(t->isPrimitive())
      {
        //primitives are already implemented (done above)
        typesImplemented[t] = true;
      }
      else if(!t->isCallable())
      {
        //get an identifier for type t
        string ident = getIdentifier();
        types[t] = ident;
        typesImplemented[t] = false;
        //forward-declare the type
        typeDecls << "typedef struct " << ident << ' ' << ident << "; //" << t->getName() << '\n';
      }
    }
    typeDecls << '\n';
    //implement all callable types
    for(auto t : allTypes)
    {
      if(t->isCallable())
      {
        CallableType* ct = (CallableType*) t;
        string ident = getIdentifier();
        types[t] = ident;
        typesImplemented[t] = true;
        typeDecls << "typedef " << types[ct->returnType] << "(*" << ident << ")(";
        for(size_t i = 0; i < ct->argTypes.size(); i++)
        {
          if(i != 0)
            typeDecls << ", ";
          typeDecls << types[ct->argTypes[i]];
        }
        typeDecls << ");\n";
      }
    }
    //implement all remaining (compound) types
    for(auto t : allTypes)
    {
      if(!t->isPrimitive() && !typesImplemented[t])
      {
        generateCompoundType(typeDecls, types[t], t);
      }
    }
  }

  void genGlobals()
  {
    int numGlobals = 0;
    walkScopeTree([&] (Scope* s) -> void
      {
        if(dynamic_cast<BlockScope*>(s))
        {
          //no local variables
          return;
        }
        for(auto n : s->names)
        {
          if(n.second.kind != Name::VARIABLE)
          {
            continue;
          }
          Variable* v = (Variable*) n.second.item;
          if(v->isMember)
          {
            return;
          }
          string ident = getIdentifier();
          vars[v] = ident;
          varDecls << types[v->type] << " " << ident << "; //" << v->name << '\n';
          numGlobals = 0;
        }
      });
    if(numGlobals)
    {
      varDecls << '\n';
    }
  }

  void genSubroutines()
  {
    //forward-declare all subroutines
    walkScopeTree([&] (Scope* s) -> void
      {
        for(auto& n : s->names)
        {
          //main() needs special handling so skip it here
          if(n.second.kind != Name::SUBROUTINE || n.first == "main")
          {
            continue;
          }
          Subroutine* sub = (Subroutine*) n.second.item;
          string ident = getIdentifier();
          subrs[sub] = ident;
          //all C functions except main are static
          //(private symbols, might save some time when linking)
          funcDecls << "static ";
          funcDecls << types[sub->type->returnType] << ' ' << ident << '(';
          for(size_t i = 0; i < sub->args.size(); i++)
          {
            Variable* arg = sub->args[i];
            if(i != 0)
            {
              funcDecls << ", ";
            }
            string argName = getIdentifier();
            vars[arg] = ident;
            funcDecls << types[arg->type] << ' ' << argName;
          }
          funcDecls << ");\n";
        }
      });
    //implement all subroutines
    walkScopeTree([&] (Scope* s) -> void
      {
        for(auto& n : s->names)
        {
          if(n.second.kind != Name::SUBROUTINE || n.first == "main")
          {
            continue;
          }
          auto sub = (Subroutine*) n.second.item;
          funcDefs << types[sub->type->returnType] << ' ' << subrs[sub] << '(';
          for(size_t i = 0; i < sub->args.size(); i++)
          {
            auto arg = sub->args[i];
            if(i != 0)
            {
              funcDefs << ", ";
            }
            string argName = getIdentifier();
            vars[arg] = argName;
            funcDefs << types[arg->type] << ' ' << argName;
          }
          funcDefs << ")\n";
          generateBlock(funcDefs, sub->body);
          funcDefs << '\n';
        }
      });
    genMain((Subroutine*) global->names["main"].item);
  }

  void genMain(Subroutine* m)
  {
    funcDefs << "int main(";
    if(m->args.size() == 1)
    {
      //single argument: array of strings
      //in C this must be (int, const char**)
      funcDefs << "int argc_, const char** argv_)\n{\n";
      //manually allocate the string[] and copy in the args
      //(don't include the first argument)
      Type* stringType = dynamic_cast<ArrayType*>(m->args[0]->type)->subtype;
      Variable* arg = m->args[0];
      vars[arg] = getIdentifier();
      funcDefs << types[arg->type] << ' ' << vars[arg] << " = ";
      funcDefs << getAllocFunc((ArrayType*) arg->type) << "(argc_ - 1, 0);\n";
      funcDefs << "for(int i_ = 0; i_ < argc_ - 1; i_++)\n{\n";
      funcDefs << vars[arg] << ".data[i_] = ((" << types[stringType];
      funcDefs << ") {strdup_(argv_[i_ + 1]), strlen(argv_[i_ + 1])});\n";
      funcDefs << "}\n";
    }
    else
    {
      funcDefs << ")\n{\n";
    }
    //generate local variables
    generateLocalVariables(funcDefs, m->body->scope);
    //generate all statements like normal (one at a time)
    for(auto stmt : m->body->stmts)
    {
      generateStatement(funcDefs, m->body, stmt);
    }
    //if main was declared void, add "return 0" to avoid warning
    //(because C return type is always int)
    if(m->type->returnType == primitives[Parser::TypeNT::VOID])
    {
      funcDefs << "return 0;\n";
    }
    funcDefs << "}\n";
  }

  void generateExpression(ostream& c, Expression* expr)
  {
    //Expressions in C mostly depend on the subclass of expr
    if(UnaryArith* unary = dynamic_cast<UnaryArith*>(expr))
    {
      c << '(';
      c << operatorTable[unary->op];
      c << '(';
      generateExpression(c, unary->expr);
      c << ')';
      c << ')';
    }
    else if(BinaryArith* binary = dynamic_cast<BinaryArith*>(expr))
    {
      //fully parenthesize binary exprs so that it works
      //in case onyx ends up with different operator precedence than C
      //arithmetic operators are trivial (except array concatenation/prepend/append)
      if(binary->op == CMPEQ)
      {
        c << getEqualsFunc(binary->lhs->type) << '(';
        generateExpression(c, binary->lhs);
        c << ", ";
        generateExpression(c, binary->rhs);
        c << ')';
      }
      else if(binary->op == CMPNEQ)
      {
        c << "(!" << getEqualsFunc(binary->lhs->type) << '(';
        generateExpression(c, binary->lhs);
        c << ", ";
        generateExpression(c, binary->rhs);
        c << "))";
      }
      else if(binary->op == CMPL)
      {
        c << getLessFunc(binary->lhs->type) << '(';
        generateExpression(c, binary->lhs);
        c << ", ";
        generateExpression(c, binary->rhs);
        c << ')';
      }
      else if(binary->op == CMPLE)
      {
        c << "(!" << getLessFunc(binary->lhs->type) << '(';
        generateExpression(c, binary->rhs);
        c << ", ";
        generateExpression(c, binary->lhs);
        c << "))";
      }
      else if(binary->op == CMPG)
      {
        c << getLessFunc(binary->lhs->type) << '(';
        generateExpression(c, binary->rhs);
        c << ", ";
        generateExpression(c, binary->lhs);
        c << ')';
      }
      else if(binary->op == CMPGE)
      {
        c << "(!" << getLessFunc(binary->lhs->type) << '(';
        generateExpression(c, binary->lhs);
        c << ", ";
        generateExpression(c, binary->rhs);
        c << "))";
      }
      else if(binary->op == PLUS &&
          binary->lhs->type->isArray() && binary->rhs->type->isArray())
      {
        //array concat
        c << getConcatFunc((ArrayType*) binary->lhs->type) << '(';
        generateExpression(c, binary->lhs);
        c << ", ";
        generateExpression(c, binary->rhs);
        c << ')';
      }
      else if(binary->op == PLUS && binary->lhs->type->isArray())
      {
        //array append
        c << getAppendFunc((ArrayType*) binary->lhs->type) << '(';
        generateExpression(c, binary->lhs);
        c << ", ";
        generateExpression(c, binary->rhs);
        c << ')';
      }
      else if(binary->op == PLUS && binary->rhs->type->isArray())
      {
        //array prepend
        c << getPrependFunc((ArrayType*) binary->rhs->type) << '(';
        generateExpression(c, binary->lhs);
        c << ", ";
        generateExpression(c, binary->rhs);
        c << ')';
      }
      else
      {
        c << "((";
        generateExpression(c, binary->lhs);
        c << ')';
        c << operatorTable[binary->op];
        c << '(';
        generateExpression(c, binary->rhs);
        c << "))";
      }
    }
    else if(IntLiteral* intLit = dynamic_cast<IntLiteral*>(expr))
    {
      //all int literals are unsigned
      c << intLit->value << "U";
      if(intLit->value >= 0xFFFFFFFF)
      {
        c << "ULL";
      }
    }
    else if(FloatLiteral* floatLit = dynamic_cast<FloatLiteral*>(expr))
    {
      //all float lits have type double, so never use "f" suffix
      c << floatLit->value;
    }
    else if(StringLiteral* stringLit = dynamic_cast<StringLiteral*>(expr))
    {
      //generate a char[] struct using C struct literal
      c << "((" << types[TypeSystem::getArrayType(primNames["char"], 1)] << ") {strdup_(\"";
      //generate the characters of the string literal one at a time, using escapes as needed
      for(char ch : stringLit->value)
      {
        c << generateChar(ch);
      }
      c << "\"), " << stringLit->value.length() << "})";
    }
    else if(CharLiteral* charLit = dynamic_cast<CharLiteral*>(expr))
    {
      c << '\'';
      c << generateChar(charLit->value);
      c << '\'';
    }
    else if(BoolLiteral* boolLit = dynamic_cast<BoolLiteral*>(expr))
    {
      if(boolLit->value)
        c << "true";
      else
        c << "false";
    }
    else if(Indexed* indexed = dynamic_cast<Indexed*>(expr))
    {
      //Indexed expression must be either a tuple or array
      auto indexedType = indexed->group->type;
      if(ArrayType* at = dynamic_cast<ArrayType*>(indexedType))
      {
        c << getAccessFunc(at) << '(';
        generateExpression(c, indexed->group);
        c << ", ";
        generateExpression(c, indexed->index);
        c << ')';
      }
      else if(dynamic_cast<TupleType*>(indexedType))
      {
        //tuple: simply reference the requested member
        c << '(';
        generateExpression(c, indexed->group);
        //index must be an IntLiteral (has already been checked)
        c << ").mem" << dynamic_cast<IntLiteral*>(indexed)->value << ')';
      }
    }
    else if(CallExpr* call = dynamic_cast<CallExpr*>(expr))
    {
      c << "(";
      generateExpression(c, call->callable);
      c << ")(";
      for(auto arg : call->args)
      {
        generateExpression(c, arg);
      }
      c << ')';
    }
    else if(VarExpr* var = dynamic_cast<VarExpr*>(expr))
    {
      c << vars[var->var];
    }
    else if(NewArray* na = dynamic_cast<NewArray*>(expr))
    {
      //call the new array function with na's dimensions
      c << getAllocFunc((ArrayType*) na->type) << '(';
      for(size_t i = 0; i < na->dims.size(); i++)
      {
        generateExpression(c, na->dims[i]);
        if(i != na->dims.size() - 1)
          c << ", ";
      }
      c << ')';
    }
    else if(auto se = dynamic_cast<SubroutineExpr*>(expr))
    {
      if(se->thisObject)
      {
        INTERNAL_ERROR; //TODO
        /*
        //method call: if this is an lvalue, take its address directly and call
        //if this is not an lvalue, generate a temp copy of it so its address can be taken
        //and use that to generate this ptr
        string thisTemp = getIdentifier();
        c << "{\n" << types[se->thisObject->type] << " temp_ = ";
        generateExpression(c, se->thisObject);
        c << ";\n";
        */
      }
      else
      {
        //standalone call, just emit name of subroutine
        c << subrs[se->subr];
      }
    }
    else if(StructMem* sm = dynamic_cast<StructMem*>(expr))
    {
      c << '(';
      generateExpression(c, sm->base);
      c << ").mem";
      //find index of sm->member
      int memIndex = -1;
      StructType* st = (StructType*) sm->base->type;
      for(size_t i = 0; i < st->members.size(); i++)
      {
        if(sm->member == st->members[i])
        {
          memIndex = i;
          break;
        }
      }
      c << memIndex;
    }
    else if(auto converted = dynamic_cast<Converted*>(expr))
    {
      c << getConvertFunc(converted->type, converted->value->type) << "(";
      generateExpression(c, converted->value);
      c << ')';
    }
    else if(dynamic_cast<ErrorVal*>(expr))
    {
      INTERNAL_ERROR;
    }
    else if(ArrayLength* al = dynamic_cast<ArrayLength*>(expr))
    {
      c << '(';
      generateExpression(c, al->array);
      c << ").dim";
    }
    else if(TempVar* tv = dynamic_cast<TempVar*>(expr))
    {
      //in C code, this is just the temporary variable's name
      c << tv->ident;
    }
    else
    {
      //compound literal, or anything else that hasn't been covered
      cout << "*** ERROR: generateExpression not implemented for some expr subclass\n";
      INTERNAL_ERROR;
    }
  }

  void generateBlock(ostream& c, Block* b)
  {
    c << "{\n";
    //introduce local variables
    generateLocalVariables(c, b->scope);
    for(auto blockStmt : b->stmts)
    {
      generateStatement(c, b, blockStmt);
    }
    c << "}\n";
  }

  void generateStatement(ostream& c, Block* b, Statement* stmt)
  {
    //get the type of statement
    if(Block* blk = dynamic_cast<Block*>(stmt))
    {
      generateBlock(c, blk);
    }
    else if(Assign* a = dynamic_cast<Assign*>(stmt))
    {
      generateAssignment(c, b, a->lvalue, a->rvalue);
    }
    else if(CallStmt* cs = dynamic_cast<CallStmt*>(stmt))
    {
      //simply generate the expression and put a semicolon after it
      generateExpression(c, cs->eval);
      c << ";\n";
    }
    else if(For* f = dynamic_cast<For*>(stmt))
    {
      //generate a "break" label for this loop
      string breakLabel = getIdentifier();
      Context::forBreakLabels[f] = breakLabel;
      //open a C block for loop scope's vars
      c << "{\n";
      generateLocalVariables(c, f->loopBlock->scope);
      if(f->init)
      {
        generateStatement(c, b, f->init);
      }
      //generate a while loop
      c << "while(";
      if(f->condition)
      {
        generateExpression(c, f->condition);
      }
      else
      {
        c << '1';
      }
      c << ")\n{\n";
      //generate loop body statements
      for(auto loopStmt : f->loopBlock->stmts)
      {
        generateStatement(c, b, loopStmt);
      }
      if(f->increment)
      {
        //enclose increment statement in a block so that
        //the automatic semicolon is OK
        generateStatement(c, b, f->increment);
      }
      c << "}\n";
      //outside the loop, put break label
      c << breakLabel << ":;\n";
      c << "}\n";
    }
    else if(While* w = dynamic_cast<While*>(stmt))
    {
      c << "while(";
      generateExpression(c, w->condition);
      c << ")\n";
      c << "{\n";
      generateBlock(c, w->loopBlock);
      c << "}\n";
    }
    else if(If* ii = dynamic_cast<If*>(stmt))
    {
      c << "if(";
      generateExpression(c, ii->condition);
      c << ")\n{\n";
      generateStatement(c, b, ii->body);
      c << "}\n";
    }
    else if(IfElse* ie = dynamic_cast<IfElse*>(stmt))
    {
      c << "if(";
      generateExpression(c, ie->condition);
      c << ")\n";
      generateStatement(c, b, ie->trueBody);
      c << "else\n";
      generateStatement(c, b, ie->falseBody);
    }
    else if(Return* r = dynamic_cast<Return*>(stmt))
    {
      if(r->value)
      {
        c << "return ";
        generateExpression(c, r->value);
        c << ";\n";
      }
      else
      {
        c << "return;\n";
      }
    }
    else if(Break* brk = dynamic_cast<Break*>(stmt))
    {
      //if a While, just use C break (always same semantics as Onyx)
      if(brk->breakable.is<While*>())
      {
        c << "break;\n";
      }
      else if(brk->breakable.is<For*>())
      {
        c << "goto " << Context::forBreakLabels[brk->breakable.get<For*>()] << ";\n";
      }
      else if(brk->breakable.is<Switch*>())
      {
        c << "goto " << Context::switchBreakLabels[brk->breakable.get<Switch*>()] << ";\n";
      }
    }
    else if(dynamic_cast<Continue*>(stmt))
    {
      c << "continue;\n";
    }
    else if(Print* p = dynamic_cast<Print*>(stmt))
    {
      for(size_t i = 0; i < p->exprs.size(); i++)
      {
        c << getPrintFunc(p->exprs[i]->type) << '(';
        generateExpression(c, p->exprs[i]);
        c << ");\n";
      }
    }
    else if(Assertion* assertion = dynamic_cast<Assertion*>(stmt))
    {
      c << "if(";
      generateExpression(c, assertion->asserted);
      c << ")\n";
      c << "{\n";
      c << "puts(\"Assertion failed.\");\n";
      c << "exit(1);\n";
      c << "}\n";
    }
    else if(Switch* sw = dynamic_cast<Switch*>(stmt))
    {
      //C can't compare compound data structures, so
      //compare to each label value and jump directly to the proper statement
      //break is a jump to the end of switch
      //use Context::switchBreakLabel to hold this label
      Context::switchBreakLabels[sw] = getIdentifier();
      //TODO
    }
    else if(Match* ma = dynamic_cast<Match*>(stmt))
    {
      //TODO
      ma = nullptr;
    }
  }

  void generateAssignment(ostream& c, Block* b, Expression* lhs, Expression* rhs)
  {
    //generateExpression can't be used with compound literals, so
    //  any case where LHS and/or RHS are compound literals needs to be handled separately
    //LHS is compound literal:
    //  -RHS can be another compound lit, or anything else is tuple, struct
    //LHS is variable or indexed:
    //  -RHS can be anything that matches type
    if(dynamic_cast<CallExpr*>(rhs))
    {
      //regardless of the types of lhs and rhs,
      //make sure subroutine only gets called once by saving return value
      c << "{\n";
      string tempName = getIdentifier();
      TempVar temp(tempName, lhs->type, b->scope);
      //now assign temp to lhs
      generateAssignment(c, b, lhs, &temp);
      c << "}\n";
    }
    else if(auto clLHS = dynamic_cast<CompoundLiteral*>(lhs))
    {
      //only compound literals, tuples and structs may be assigned to a compound literal
      if(auto clRHS = dynamic_cast<CompoundLiteral*>(rhs))
      {
        //copy members directly, one at a time
        for(size_t i = 0; i < clLHS->members.size(); i++)
        {
          generateAssignment(c, b, clLHS->members[i], clRHS->members[i]);
        }
      }
      else if(rhs->type->isTuple())
      {
        for(size_t i = 0; i < clLHS->members.size(); i++)
        {
          //create tuple index
          IntLiteral index(i);
          Indexed rhsMember(rhs, &index);
          generateAssignment(c, b, clLHS->members[i], &rhsMember);
        }
      }
      else if(rhs->type->isStruct())
      {
        //generate assignment for each member
        for(size_t i = 0; i < clLHS->members.size(); i++)
        {
          IntLiteral index(i);
          Indexed rhsMember(rhs, &index);
          generateAssignment(c, b, clLHS->members[i], &rhsMember);
        }
      }
    }
    else if(auto clRHS = dynamic_cast<CompoundLiteral*>(rhs))
    {
      //lhs may be a tuple, struct or array
      //know that lhs is not also a compound literal,
      //because that case is handled above
      if(lhs->type->isStruct())
      {
        //generate a StructMem expr for each member,
        //then generate the assignment to that
        //
        //semantic checking has already made sure that
        //compound lit members match 1-1 with struct members
        for(size_t i = 0; i < clRHS->members.size(); i++)
        {
          auto st = dynamic_cast<StructType*>(lhs->type);
          StructMem lhsMem(lhs, st->members[i]);
          generateAssignment(c, b, &lhsMem, clRHS->members[i]);
        }
      }
      else if(lhs->type->isTuple())
      {
        for(size_t i = 0; i < clRHS->members.size(); i++)
        {
          IntLiteral index(i);
          Indexed lhsMember(lhs, &index);
          generateAssignment(c, b, &index, clRHS->members[i]);
        }
      }
      else if(lhs->type->isArray())
      {
        //since an array is an lvalue, it
        //must already be allocated
        /*
        c << getDeallocFunc(lhs->type) << "(";
        generateExpression(c, lhs);
        c << ");\n";
        */
        //create the array with proper size,
        //then assign each element individually
        generateExpression(c, lhs);
        c << " = " << getAllocFunc((ArrayType*) lhs->type) << "(";
        c << clRHS->members.size() << ");\n";
        for(size_t i = 0; i < clRHS->members.size(); i++)
        {
          IntLiteral index(i);
          Indexed lhsMember(lhs, &index);
          generateAssignment(c, b, &lhsMember, clRHS->members[i]);
        }
      }
    }
    else
    {
      //direct assignment of one expression to another, where neither
      //lhs nor rhs are CompoundLiterals and rhs is not a subroutine call
      //  -call free on lhs before assignment (if necessary for its type)
      //  -if rhs is assignable, it is persistent, so need to deep copy
      //  -if rhs is not persistent, can shallow copy it
      /*
      if(lhs->assignable() && needsDealloc[lhs->type])
      {
        c << getDeallocFunc(lhs->type) << "(";
        generateExpression(c, lhs);
        c << ");\n";
      }
      */
      if(rhs->assignable())
      {
        generateExpression(c, lhs);
        c << " = " << getCopyFunc(rhs->type) << "(";
        generateExpression(c, rhs);
        c << ");\n";
      }
      else
      {
        generateExpression(c, lhs);
        c << " = ";
        generateExpression(c, rhs);
        c << ";\n";
      }
    }
  }

  void generateLocalVariables(ostream& c, BlockScope* bs)
  {
    for(auto& n : bs->names)
    {
      if(n.second.kind != Name::VARIABLE)
      {
        continue;
      }
      Variable* local = (Variable*) n.second.item;
      string localIdent = getIdentifier();
      vars[local] = localIdent;
      c << types[local->type] << ' ' << localIdent << " = " <<
        getInitFunc(local->type) << "(); // " << local->type->getName() <<
        ' ' << local->name << '\n';
    }
  }

  bool typeNeedsDealloc(TypeSystem::Type* t)
  {
    //lazily populate needsDealloc
    auto it = needsDealloc.find(t);
    if(it == needsDealloc.end())
    {
      bool value = false;
      if(t->isPrimitive())
      {
        value = false;
      }
      else if(auto st = dynamic_cast<StructType*>(t))
      {
        for(auto mem : st->members)
        {
          if(typeNeedsDealloc(mem->type))
          {
            value = true;
            break;
          }
        }
      }
      else if(auto tt = dynamic_cast<TupleType*>(t))
      {
        for(auto mem : tt->members)
        {
          if(typeNeedsDealloc(mem))
          {
            value = true;
            break;
          }
        }
      }
      else if(dynamic_cast<UnionType*>(t))
      {
        value = true;
      }
      else if(dynamic_cast<ArrayType*>(t))
      {
        value = true;
      }
      needsDealloc[t] = value;
      return value;
    }
    return it->second;
  }

  string getIdentifier()
  {
    //use a base-36 encoding of identCount using 0-9 A-Z
    char buf[32];
    buf[31] = 0;
    auto val = identCount;
    int iter = 30;
    for(;; iter--)
    {
      int digit = val % 36;
      if(digit < 10)
      {
        buf[iter] = '0' + digit;
      }
      else
      {
        buf[iter] = 'A' + (digit - 10);
      }
      val /= 36;
      if(val == 0)
        break;
    }
    //now buf + iter is the string
    identCount++;
    return string("o") + (buf + iter) + '_';
  }

  template<typename F>
  void walkScopeTree(F f)
  {
    vector<Scope*> visit;
    visit.push_back(global);
    while(visit.size())
    {
      Scope* s = visit.back();
      f(s);
      visit.pop_back();
      for(auto child : s->children)
      {
        visit.push_back(child);
      }
    }
  }

  void generateCompoundType(ostream& c, string cName, TypeSystem::Type* t)
  {
    auto at = dynamic_cast<ArrayType*>(t);
    auto st = dynamic_cast<StructType*>(t);
    auto ut = dynamic_cast<UnionType*>(t);
    auto tt = dynamic_cast<TupleType*>(t);
    auto et = dynamic_cast<EnumType*>(t);
    //first, make sure all necessary types have already been defined
    //this can't cause infinite recursion because semantic
    //checker makes sure there is no circular members
    if(at)
    {
      if(!typesImplemented[at->elem])
      {
        generateCompoundType(c, types[at->elem], at->elem);
      }
    }
    else if(st)
    {
      for(auto mem : st->members)
      {
        if(!typesImplemented[mem->type])
        {
          generateCompoundType(c, types[mem->type], mem->type);
        }
      }
    }
    else if(tt)
    {
      for(auto mem : tt->members)
      {
        if(!typesImplemented[mem])
        {
          generateCompoundType(c, types[mem], mem);
        }
      }
    }
    if(et)
    {
      //enum type always represented as signed integer, which is as
      //small as possible while still fitting all values
      c << "typedef int" << 8 * et->bytes << "_t " << cName << ";\n";
    }
    else
    {
      //open a struct declaration
      c << "struct " << cName << "\n{\n";
      if(at)
      {
        //pointer to element type
        c << types[at->subtype] << "* data;\n";
        //dims
        c << size_type << " dim;\n";
      }
      else if(st)
      {
        //add all members (as pointer)
        //  since there is no possible name collision among the member names, don't
        //  need to replace them with mangled identifiers
        for(size_t i = 0; i < st->members.size(); i++)
        {
          c << types[st->members[i]->type] << " mem" << i << ";\n";
        }
      }
      else if(ut)
      {
        c << "void* data;\n";
        c << "int option;\n";
      }
      else if(tt)
      {
        for(size_t i = 0; i < tt->members.size(); i++)
        {
          //tuple members are anonymous so just use memN as the name
          c << types[tt->members[i]] << " mem" << i << ";\n";
        }
      }
      c << "};\n";
    }
    typesImplemented[t] = true;
  }

  string getInitFunc(Type* t)
  {
    string& typeName = types[t];
    string func = "init_" + typeName + "_";
    //additional types where init funcs should be generated vector<Type*> deps;
    if(initImpl.find(t) != initImpl.end())
    {
      return func;
    }
    initImpl.insert(t);
    Oss def;
    utilFuncDecls << typeName << ' ' << func << "();\n";
    def << "inline " << typeName << ' ' << func << "()\n{\n";
    if(t->isNumber() || t->isChar())
    {
      def << "return 0;\n";
    }
    else if(t->isBool())
    {
      def << "return false;\n";
    }
    else if(t->isStruct() || t->isTuple())
    {
      auto st = dynamic_cast<StructType*>(t);
      auto tt = dynamic_cast<TupleType*>(t);
      def << typeName << " temp_;\n";
      if(st)
      {
        for(size_t i = 0; i < st->members.size(); i++)
        {
          def << "temp_.mem" << i << " = " <<
            getInitFunc(st->members[i]->type) << "();\n";
        }
      }
      else
      {
        for(size_t i = 0; i < tt->members.size(); i++)
        {
          def << "temp_.mem" << i << " = " <<
            getInitFunc(tt->members[i]) << "();\n";
        }
      }
      def << "return temp_;\n";
    }
    else if(t->isArray())
    {
      //empty array doesn't need any allocation (leave data null)
      def << "return ((" << typeName << ") {NULL, 0});\n";
    }
    else if(t->isUnion())
    {
      def << "return ((" << typeName << ") {NULL, 0});\n";
    }
    def << "}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getCopyFunc(Type* t)
  {
    string& typeName = types[t];
    string func = "copy_" + typeName + "_";
    if(copyImpl.find(t) != copyImpl.end())
    {
      return func;
    }
    copyImpl.insert(t);
    Oss def;
    {
      Oss prototype;
      prototype << typeName << ' ' << func << '(' << typeName << " data_)";
      utilFuncDecls << prototype.str() << ";\n";
      def << "inline " << prototype.str() << "\n{\n";
    }
    //note: void doesn't get a copy function because it will never be called
    //cannot have variable or argument of type void (checked in middle end)
    if(t->isPrimitive())
    {
      //primitives (integers, bool, floats) are trivially copyable
      def << "return data_;\n";
    }
    else if(auto at = dynamic_cast<ArrayType*>(t))
    {
      string& subtype = types[at->subtype];
      def << subtype << "* temp_ = malloc(sizeof(" << subtype << ") * data_.dim);\n";
      def << "for(" << size_type << " i_ = 0; i_ < data_.dim; i_++)\n{\n";
      def << "temp_[i_] = " << getCopyFunc(at->subtype) << "(data_.data[i_]);\n";
      def << "}\n";
      def << "return ((" << typeName << ") {temp_, data_.dim});\n";
    }
    else if(auto st = dynamic_cast<StructType*>(t))
    {
      utilFuncDefs << typeName << " temp_;\n";
      for(size_t i = 0; i < st->members.size(); i++)
      {
        def << "temp_.mem" << i << " = " << getCopyFunc(st->members[i]->type) << "(data_." << st->members[i]->name << ");\n";
      }
      def << "return temp_;\n";
    }
    else if(auto ut = dynamic_cast<UnionType*>(t))
    {
      def << typeName << " temp_;\n";
      def << "temp_.option = data_.option;\n";
      def << "switch(data_.option)\n";
      for(size_t i = 0; i < ut->options.size(); i++)
      {
        def << "case " << i << ":\n";
        //allocate space in temp
        string& optionType = types[ut->options[i]];
        def << "temp_.data = malloc(sizeof(" << optionType << ");\n";
        //deep copy data_'s underlying type into temp_
        def << "*((" << optionType << "*) temp_.data) = " << getCopyFunc(ut->options[i]) << "(*((" << optionType << "*) data_.data));\n";
        def << "break;\n";
      }
    }
    else if(auto tt = dynamic_cast<TupleType*>(t))
    {
      //like struct, copy one member at a time
      def << typeName << " temp_;\n";
      for(size_t i = 0; i < tt->members.size(); i++)
      {
        def << "temp_.mem" << i << " = " << getCopyFunc(tt->members[i]) << "(data_.mem" << i << ");\n";
      }
      def << "return temp_;\n";
    }
    def << "}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getAllocFunc(ArrayType* t)
  {
    string func = "alloc_" + types[t] + "_";
    string& typeName = types[t];
    if(allocImpl.find(t) != allocImpl.end())
    {
      return func;
    }
    allocImpl.insert(t);
    //names of arguments
    vector<string> args;
    for(int i = 0; i < t->dims; i++)
    {
      args.push_back(getIdentifier());
    }
    //names of loop counters
    vector<string> counters;
    for(int i = 0; i < t->dims; i++)
    {
      counters.push_back(getIdentifier());
    }
    Oss def;
    {
      Oss prototype;
      prototype << typeName << ' ' << func << '(';
      for(int i = 0; i < t->dims; i++)
      {
        prototype << size_type << ' ' << args[i];
        if(i != t->dims - 1)
          prototype << ", ";
      }
      prototype << ')';
      utilFuncDecls << prototype.str() << ";\n";
      def << "inline " << prototype.str() << "\n{\n";
    }
    //create the overall array type (which will be returned at the end)
    def << typeName << " array_;\n";
    //add prototype to both util decls and defs
    Type* subtype = t->subtype;
    for(int i = 0; i < t->dims; i++)
    {
      //generate allocation
      def << "array_.data";
      for(int j = 0; j < i; j++)
      {
        def << "[" << counters[j] << "].data";
      }
      //set data
      def << " = malloc(" << args[i] << " * sizeof(" << types[subtype] << "));\n";
      //set dimensions
      def << "array_";
      for(int j = 0; j < i; j++)
      {
        def << ".data[" << counters[j] << "]";
      }
      //set data
      def << ".dim = " << args[i] << ";\n";
      //generate a loop for the ith dimension
      def << "for(" << size_type << ' ' << counters[i] << " = 0; " <<
        counters[i] << " < " << args[i] << "; "
        << counters[i] << "++)\n{\n";
      if(i == t->dims - 1)
      {
        //in innermost loop, call init() to each element of innermost array
        def << "array_";
        for(int j = 0; j <= i; j++)
        {
          def << ".data[" << counters[j] << ']';
        }
        def << " = " << getInitFunc(subtype) << "();\n";
      }
      //if not in last iteration (where subtype is not an array),
      //switch type to next-lower dimension
      if(i != t->dims - 1)
      {
        ArrayType* sub = dynamic_cast<ArrayType*>(subtype);
        subtype = sub->subtype;
      }
    }
    //close all the loops
    for(int i = 0; i < t->dims; i++)
    {
      def << "}\n";
    }
    def << "return array_;\n";
    def << "}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getDeallocFunc(Type* t)
  {
    string func = "free_" + types[t] + "_";
    if(deallocImpl.find(t) != deallocImpl.end())
    {
      return func;
    }
    deallocImpl.insert(t);
    string& typeName = types[t];
    //only struct, tuple, array and unions need to be freed
    utilFuncDecls << "void " << func << "(" << typeName << " data_);\n";
    Oss def;
    def << "inline void " << func << "(" << typeName << " data_)\n{\n";
    if(auto st = dynamic_cast<StructType*>(t))
    {
      for(size_t i = 0; i < st->members.size(); i++)
      {
        if(typeNeedsDealloc(st->members[i]->type))
        {
          def << getDeallocFunc(st->members[i]->type) << "(data_." << st->members[i]->type << ");\n";
        }
      }
    }
    else if(auto tt = dynamic_cast<TupleType*>(t))
    {
      for(size_t i = 0; i < tt->members.size(); i++)
      {
        if(typeNeedsDealloc(tt->members[i]))
        {
          def << getDeallocFunc(tt->members[i]) << "(data_.mem" << i << ");\n";
        }
      }
    }
    else if(auto ut = dynamic_cast<UnionType*>(t))
    {
      def << "switch(data_.option)\n{\n";
      for(size_t i = 0; i < ut->options.size(); i++)
      {
        def << "case " << i << ":\n";
        if(typeNeedsDealloc(ut->options[i]))
        {
          def << getDeallocFunc(ut->options[i]) << "(*((" << types[ut->options[i]] << "*) data_.data));\n";
        }
        def << "break;\n";
      }
      def << "free(data_.data);\n";
      def << "}\n";
    }
    else if(auto at = dynamic_cast<ArrayType*>(t))
    {
      def << "if(data_.data != NULL)\n{\n";
      //add free calls for each element, if subtype has nontrivial deallocator
      if(typeNeedsDealloc(at->subtype))
      {
        def << "for(size_t i_ = 0; i_ < data_.dim; i_++)\n{\n";
        def << getDeallocFunc(at->subtype) << "(data_.data[i_]);\n";
        def << "}\n";
      }
      def << "free(data_.data);\n";
      def << "}\n";
    }
    def << "}\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getPrintFunc(Type* t)
  {
    string& typeName = types[t];
    string func = "print_" + typeName + "_";
    if(printImpl.find(t) != printImpl.end())
    {
      return func;
    }
    printImpl.insert(t);
    Oss def;
    utilFuncDecls << "void " << func << "(" << typeName << " data_);\n";
    def << "void " << func << "(" << typeName << " data_)\n{\n";
    if(t->isPrimitive())
    {
      //all primitives except bool can be printed as a single printf specifier
      //so just determine the %format
      string fmt;
      if(auto intType = dynamic_cast<IntegerType*>(t))
      {
        //printf format code
        switch(intType->size)
        {
          case 1:
            fmt = intType->isSigned ? "hhd" : "hhu";
            break;
          case 2:
            fmt = intType->isSigned ? "hd" : "hu";
            break;
          case 4:
            fmt = intType->isSigned ? "d" : "u";
            break;
          case 8:
            fmt = intType->isSigned ? "lld" : "llu";
            break;
          default:
            INTERNAL_ERROR;
        }
      }
      else if(t->isChar())
      {
        fmt = "c";
      }
      else if(t->isFloat())
      {
        fmt = "f";
      }
      def << "printf(\"%" << fmt << "\", data_);\n";
    }
    else if(t->isBool())
    {
      def << "if(data_)\nprintf(\"true\");\nelse\nprintf(\"false\");\n";
    }
    else
    {
      //compound types
      if(ArrayType* at = dynamic_cast<ArrayType*>(t))
      {
        if(at->subtype->isChar())
        {
          //t is string: write it to stdout all at once
          def << "fwrite(data_.data, 1, data_.dim, stdout);\n";
        }
        else
        {
          def << "putchar('{');\n";
          def << "for(uint64_t count_ = 0; ";
          def << "count_ < data_.dim; count_++)\n{\n";
          def << getPrintFunc(at->subtype) << "(data_.data[count_]);\n}\n";
          def << "putchar('}');\n";
        }
      }
      else if(TupleType* tt = dynamic_cast<TupleType*>(t))
      {
        def << "putchar('(');\n";
        //print each member, comma separated
        for(size_t i = 0; i < tt->members.size(); i++)
        {
          def << getPrintFunc(tt->members[i]) << "(data_.mem" << i << ");\n";
          if(i != tt->members.size() - 1)
          {
            def << "printf(\", \");\n";
          }
        }
        def << "putchar(')');\n";
      }
      else if(StructType* st = dynamic_cast<StructType*>(t))
      {
        def << "printf(\"" << st->getName() << " {\");\n";
        //print each member, comma separated
        for(size_t i = 0; i < st->members.size(); i++)
        {
          def << getPrintFunc(st->members[i]->type) << "(data_.mem" << i << ");\n";
          if(i != st->members.size() - 1)
          {
            def << "printf(\", \");\n";
          }
        }
        def << "putchar(')');\n";
      }
      else if(UnionType* ut = dynamic_cast<UnionType*>(t))
      {
        def << "printf(\"" << ut->getName() << " @%i\", data_.option);\n";
        def << "switch(data_.option)\n{\n";
        for(size_t i = 0; i < ut->options.size(); i++)
        {
          def << "case " << i << ":\n";
          def << getPrintFunc(ut->options[i]) << "(*((" << types[ut->options[i]] << ") data_.data));\n";
          def << "break;\n";
        }
        def << "default:;\n";
        def << "}\n";
      }
    }
    def << "}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getConvertFunc(Type* out, Type* in)
  {
    string func = "convert_" + types[out] + "_" + types[in] + "_";
    pair<Type*, Type*> typePair(out, in);
    if(convertImpl.find(typePair) != convertImpl.end())
    {
      return func;
    }
    convertImpl.insert(typePair);
    Oss def;
    {
      Oss prototype;
      prototype << types[out] << ' ' << func << '(' << types[in] << " in_)";
      utilFuncDecls << prototype.str() << ";\n";
      def << "inline " << prototype.str() << "\n{\n";
    }
    //All supported type conversions:
    //  (case 1) -All primitives can be converted to each other trivially
    //    -floats/doubles truncated to integer as in C
    //    -ints converted to each other as in C
    //    -char treated as integer
    //    -any number converted to bool with nonzero being true
    //  (case 2) -Out = struct: in = struct or tuple
    //  (case 3) -Out = array: in = struct, tuple or array
    //  TODO (case 4) -Out = map: in = map, array, or tuple
    //    -in = map: convert keys to keys and values to values;
    //      since maps are unordered, key conflicts are UB
    //    -in = array/tuple: key is int, values converted to values
    //    -in = struct: key is string, value 
    //  (case 2) -Out = tuple: in = struct or tuple
    //conversion from one primitive to another is same semantics as C
    if(in->isPrimitive() && out->isPrimitive())
    {
      if(out == TypeSystem::primitives[Parser::TypeNT::BOOL])
        def << "return in_ != 0;\n";
      else
        def << "return (" << types[out] << ") in_;\n";
    }
    else if((out->isStruct() || out->isTuple()) && (in->isStruct() || in->isTuple()))
    {
      StructType* inStruct = dynamic_cast<StructType*>(in);
      StructType* outStruct = dynamic_cast<StructType*>(out);
      TupleType* inTuple = dynamic_cast<TupleType*>(in);
      TupleType* outTuple = dynamic_cast<TupleType*>(out);
      def << types[out] << " out_;\n";
      //deep copy members, one at a time
      //do explicit conversion where necessary
      size_t n = 0;
      if(outStruct)
        n = outStruct->members.size();
      else
        n = outTuple->members.size();
      for(size_t i = 0; i < n; i++)
      {
        Type* inMem;
        Type* outMem;
        if(inStruct)
          inMem = inStruct->members[i]->type;
        else
          inMem = inTuple->members[i];
        if(outStruct)
          outMem = outStruct->members[i]->type;
        else
          outMem = outTuple->members[i];
        if(inMem == outMem)
        {
          def << "out_.mem" << i << " = " << getCopyFunc(inMem) << '(' <<
            "in_.mem" << i << ");\n";
        }
        else
        {
          def << "out_.mem" << i << " = " << getConvertFunc(outMem, inMem) <<
            '(' << "in_.mem" << i << ");\n";
        }
      }
      def << "return out_;\n";
    }
    else if(out->isArray())
    {
      ArrayType* outArray = (ArrayType*) out;
      //1 of these 3 pointers will be non-null
      StructType* inStruct = dynamic_cast<StructType*>(in);
      TupleType* inTuple = dynamic_cast<TupleType*>(in);
      ArrayType* inArray = dynamic_cast<ArrayType*>(in);
      //first, allocate correctly sized array
      def << types[out] << " out_ = " << getAllocFunc(outArray) << '(';
      if(inStruct)
      {
        def << inStruct->members.size();
      }
      else if(inTuple)
      {
        def << inTuple->members.size();
      }
      else
      {
        def << "in_.dim";
      }
      def << ");\n";
      //copy members, converting as necessary
      Type* outSubtype = outArray->subtype;
      if(inStruct || inTuple)
      {
        size_t n = inStruct ? inStruct->members.size() : inTuple->members.size();
        for(size_t i = 0; i < n; i++)
        {
          Type* inMem = nullptr;
          if(inStruct)
            inMem = inStruct->members[i]->type;
          else
            inMem = inTuple->members[i];
          def << "out_.data[" << i << " = ";
          if(outSubtype == inMem)
          {
            def << getCopyFunc(outSubtype);
          }
          else
          {
            def << getConvertFunc(outSubtype, inMem);
          }
          def << "(in_.mem" << i << ");\n";
        }
      }
      else
      {
        Type* inSubtype = inArray->subtype;
        //array: generate a C loop that copies or converts members
        def << "for(" << size_type << " i_ = 0; i_ < in_.dim; i_++)\n{\n";
        def << "in_[i_] = ";
        if(outSubtype == inSubtype)
          def << getCopyFunc(outSubtype);
        else
          def << getConvertFunc(outSubtype, inSubtype);
        def << "(in_.data[i]);\n";
        def << "}\n";
      }
      def << "return out_;\n";
    }
    else if(out->isMap())
    {
      cout << "maps not yet supported by C backend\n";
      INTERNAL_ERROR;
    }
    def << "}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getEqualsFunc(Type* t)
  {
    string& typeName = types[t];
    string func = "equals_" + typeName + "_";
    if(equalsImpl.find(t) != equalsImpl.end())
    {
      return func;
    }
    equalsImpl.insert(t);
    Oss def;
    Oss prototype;
    prototype << "bool " << func << '(' << typeName << " lhs_, " << typeName << " rhs_)";
    utilFuncDecls << prototype.str() << ';';
    def << prototype.str() << "\n{\n";
    if(t->isPrimitive() || t->isCallable())
    {
      def << "return lhs_ == rhs_;\n";
    }
    else if(StructType* st = dynamic_cast<StructType*>(t))
    {
      for(size_t i = 0; i < st->members.size(); i++)
      {
        Type* mem = st->members[i]->type;
        def << "if(!" << getEqualsFunc(mem) << "(lhs_.mem" << i <<
          ", rhs_.mem" << i << "))\nreturn false;\n";
      }
      def << "return true;\n";
    }
    else if(TupleType* tt = dynamic_cast<TupleType*>(t))
    {
      for(size_t i = 0; i < tt->members.size(); i++)
      {
        def << "if(!" << getEqualsFunc(tt->members[i]) << "(lhs_.mem" << i <<
          ", rhs_.mem" << i << "))\nreturn false;\n";
      }
      def << "return true;\n";
    }
    else if(ArrayType* at = dynamic_cast<ArrayType*>(t))
    {
      def << "if(lhs_.dim != rhs_.dim)\nreturn false;\n";
      def << "for(" << size_type << " i_ = 0; i_ < lhs_.dim; i_++)\n";
      def << "{\nif(!" << getEqualsFunc(at->subtype) << "(lhs_.data[i_], rhs_.data[i_]))\n";
      def << "return false;}\n";
      def << "return true;\n";
    }
    else if(UnionType* ut = dynamic_cast<UnionType*>(t))
    {
      //lhs and rhs must be exactly the same union type,
      //so compare tags and then data
      def << "if(lhs_.option != rhs_.option)\n{\nreturn false;\n}\n";
      //need to compare underlying data for the actual type
      def << "switch(lhs_.option)\n{\n";
      for(size_t i = 0; i < ut->options.size(); i++)
      {
        def << "case " << i << ":\n";
        def << "return " << getEqualsFunc(ut->options[i]) << "*((" <<
          types[ut->options[i]] << ") lhs_.data), *((" << types[ut->options[i]] << ") rhs_.data));\n";
      }
      def << "default: return false;\n}\n";
      def << "return false;\n";
    }
    else if(MapType* mt = dynamic_cast<MapType*>(t))
    {
      cout << "maps not implemented yet\n";
      INTERNAL_ERROR;
    }
    else
    {
      cout << "some type hasn't been compared yet, C backend:" << __LINE__ << "\n";
      INTERNAL_ERROR;
    }
    def << "}\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getLessFunc(Type* t)
  {
    string& typeName = types[t];
    string func = "less_" + typeName + "_";
    if(lessImpl.find(t) != lessImpl.end())
    {
      return func;
    }
    lessImpl.insert(t);
    Oss def;
    Oss prototype;
    prototype << "bool " << func << '(' << typeName << " lhs_, " << typeName << " rhs_)";
    utilFuncDecls << prototype.str() << ';';
    def << prototype.str() << "\n{\n";
    if(t->isPrimitive() || t->isCallable())
    {
      if(t->isBool())
        def << "return !lhs_ && rhs_;\n";
      else
        def << "return lhs_ < rhs_;\n";
    }
    else if(StructType* st = dynamic_cast<StructType*>(t))
    {
      for(size_t i = 0; i < st->members.size(); i++)
      {
        Type* mem = st->members[i]->type;
        def << "if(" << getLessFunc(mem) << "(lhs_.mem" << i <<
          ", rhs_.mem" << i << "))\nreturn true;\n";
        def << "else if(" << getLessFunc(mem) << "(rhs_.mem" << i <<
          ", rhs_.mem" << i << "))\nreturn false;\n";
      }
      def << "return false;\n";
    }
    else if(TupleType* tt = dynamic_cast<TupleType*>(t))
    {
      for(size_t i = 0; i < tt->members.size(); i++)
      {
        def << "if(" << getLessFunc(tt->members[i]) << "(lhs_.mem" << i <<
          ", rhs_.mem" << i << "))\nreturn true;\n";
        def << "else if(" << getLessFunc(tt->members[i]) << "(rhs_.mem" << i <<
          ", rhs_.mem" << i << "))\nreturn false;\n";
      }
      def << "return false;\n";
    }
    else if(ArrayType* at = dynamic_cast<ArrayType*>(t))
    {
      def << "if(lhs_.dim < rhs_.dim)\nreturn true;\n";
      def << "else if(lhs_.dim > rhs_.dim)\nreturn false;\n";
      def << "for(" << size_type << " i_ = 0; i_ < lhs_.dim; i_++)\n";
      def << "{\n";
      def << "if(" << getLessFunc(at->subtype) << "(lhs_.data[i_], rhs_.data[i_]))\n";
      def << "return true;";
      def << "else if(" << getLessFunc(at->subtype) << "(rhs_.data[i_], lhs_.data[i_]))\n";
      def << "return false;";
      def << "}\n";
      def << "return false;\n";
    }
    else if(UnionType* ut = dynamic_cast<UnionType*>(t))
    {
      //lhs and rhs must be exactly the same union type,
      //so compare tags and then data
      def << "if(lhs_.option < rhs_.option)\nreturn true;\n";
      def << "else if(lhs_.option > rhs_.option)\nreturn true;\n";
      //need to compare underlying data for the actual type
      def << "switch(lhs_.option)\n{\n";
      for(size_t i = 0; i < ut->options.size(); i++)
      {
        def << "case " << i << ":\n";
        def << "return " << getLessFunc(ut->options[i]) << "*((" <<
          types[ut->options[i]] << ") lhs_.data), *((" << types[ut->options[i]] << ") rhs_.data));\n";
      }
      def << "default: return false;\n}\n";
      def << "return false;\n";
    }
    else if(MapType* mt = dynamic_cast<MapType*>(t))
    {
      cout << "maps not implemented yet\n";
      INTERNAL_ERROR;
    }
    else
    {
      cout << "some type hasn't been compared yet, C backend:" << __LINE__ << "\n";
      INTERNAL_ERROR;
    }
    def << "}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getConcatFunc(ArrayType* at)
  {
    string& typeName = types[at];
    string func = "concat_" + typeName + '_';
    if(concatImpl.find(at) != concatImpl.end())
    {
      return func;
    }
    concatImpl.insert(at);
    Oss prototype;
    prototype << typeName << ' ' << func << '(' << typeName;
    prototype << " lhs_, " << typeName << " rhs_)";
    utilFuncDecls << prototype.str() << ";\n";
    Oss def;
    def << prototype.str() << "\n{\n";
    //allocate new array "rv_"
    Type* subtype = at->subtype;
    def << typeName << " rv_ = ((" << typeName <<
      ") {malloc((lhs_.dim + rhs_.dim) * sizeof(" <<
      types[subtype] << ")), lhs_.dim + rhs_.dim});\n";
    def << "for(size_t i_ = 0; i_ < lhs_.dim; i_++)\n{\n";
    def << "rv_.data[i_] = " << getCopyFunc(subtype) << "(lhs_.data[i_]);\n";
    def << "}\n";
    def << "for(size_t i_ = 0; i_ < rhs_.dim; i_++)\n{\n";
    def << "rv_.data[i_ + lhs_.dim] = " << getCopyFunc(subtype) <<
      "(rhs_.data[i_]);\n";
    def << "}\n";
    def << "return rv_;\n}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getAppendFunc(TypeSystem::ArrayType* at)
  {
    string& typeName = types[at];
    string func = "append_" + typeName + '_';
    if(appendImpl.find(at) != appendImpl.end())
    {
      return func;
    }
    appendImpl.insert(at);
    Oss prototype;
    Type* subtype = at->subtype;
    prototype << typeName << ' ' << func << '(' << typeName;
    prototype << " lhs_, " << types[subtype] << " rhs_)";
    utilFuncDecls << prototype.str() << ";\n";
    Oss def;
    def << prototype.str() << "\n{\n";
    //allocate new array "rv_"
    def << typeName << " rv_ = ((" << typeName <<
      ") {malloc((lhs_.dim + 1) * sizeof(" <<
      types[subtype] << ")), lhs_.dim + 1});\n";
    def << "for(size_t i_ = 0; i_ < lhs_.dim; i_++)\n{\n";
    def << "rv_.data[i_] = " << getCopyFunc(subtype) << "(lhs_.data[i_]);\n";
    def << "}\n";
    def << "rv_.data[lhs_.dim] = " << getCopyFunc(subtype) << "(rhs_);\n";
    def << "return rv_;\n}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getPrependFunc(TypeSystem::ArrayType* at)
  {
    string& typeName = types[at];
    string func = "prepend_" + typeName + '_';
    if(prependImpl.find(at) != prependImpl.end())
    {
      return func;
    }
    prependImpl.insert(at);
    Oss prototype;
    Type* subtype = at->subtype;
    prototype << typeName << ' ' << func << '(' << types[subtype] << " lhs_, ";
    prototype << typeName << " rhs_)";
    utilFuncDecls << prototype.str() << ";\n";
    Oss def;
    def << prototype.str() << "\n{\n";
    //allocate new array "rv_"
    def << typeName << " rv_ = ((" << typeName <<
      ") {malloc((rhs_.dim + 1) * sizeof(" <<
      types[subtype] << ")), rhs_.dim + 1});\n";
    def << "rv_.data[0] = " << getCopyFunc(subtype) << "(lhs_);\n";
    def << "for(size_t i_ = 0; i_ < rhs_.dim; i_++)\n{\n";
    def << "rv_.data[i_ + 1] = " << getCopyFunc(subtype) << "(rhs_.data[i_]);\n";
    def << "}\n";
    def << "return rv_;\n}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  string getAccessFunc(ArrayType* at)
  {
    string& typeName = types[at];
    string func = "access_" + typeName + '_';
    if(prependImpl.find(at) != prependImpl.end())
    {
      return func;
    }
    prependImpl.insert(at);
    Oss prototype;
    Type* subtype = at->subtype;
    prototype << types[subtype] << ' ' << func << '(' << typeName << " arr_, ";
    prototype << size_type << " index_)";
    utilFuncDecls << prototype.str() << ";\n";
    Oss def;
    def << prototype.str() << "\n{\n";
    //note: size_type is unsigned so no need to check for >= 0
    def << "if(index_ >= arr_.dim)\n{\n";
    def << "char buf[64];\n";
    def << "sprintf(buf, \"array index %u out of bounds\", index_);\n";
    def << "panic_(buf);\n";
    def << "}\n";
    def << "return arr_.data[index_];\n";
    def << "}\n\n";
    utilFuncDefs << def.str();
    return func;
  }

  void generateSectionHeader(ostream& c, string name)
  {
    c << "//////////////////////////////\n";
    int space = 13 - name.length() / 2;
    c << "//";
    for(int i = 0; i < space; i++)
      c << ' ';
    c << name;
    for(int i = 2 + space + name.length(); i < 28; i++)
      c << ' ';
    c << "//\n";
    c << "//////////////////////////////\n\n";
  }
}

