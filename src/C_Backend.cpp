#include "C_Backend.hpp"

using namespace TypeSystem;

map<Type*, string> types;
map<Type*, bool> typesImplemented;
map<Subroutine*, string> subrs;
map<Variable*, string> vars;
map<Type*, bool> needsDealloc;   //whether each type needs a non-trivial deallocator
size_t identCount;
ofstream c;
//different stringstreams to build the C file (in this order)
Oss typeDecls;      //all typedefs (including forward-declarations as necessary)
Oss varDecls;       //all global/static variables
Oss utilFuncDecls;  //util functions are print, array creation, deep copy, etc
Oss utilFuncDefs;
Oss funcDecls;      //the actual subroutines in the onyx program
Oss funcDefs;

//The C type to use for array indices (could possibly be uint64_t for more portability)
const char* size_type = "uint32_t";

namespace C
{
  void generate(string outputStem, bool keep)
  {
    cout << "Starting C backend.\n";
    string cName = outputStem + ".c";
    string exeName = outputStem + ".exe";
    typeDecls = Oss();
    varDecls = Oss();
    utilFuncDecls = Oss();
    utilFuncDefs = Oss();
    funcDecls = Oss();
    funcDefs = Oss();
    cout << "  > Generating type declarations\n";
    generateSectionHeader(typeDecls, "Type Decls");
    genTypeDecls();
    cout << "  > Generating global funcs\n";
    generateSectionHeader(varDecls, "Global Variables");
    genGlobals();
    cout << "  > Generating init funcs\n";
    generateSectionHeader(utilFuncDecls, "Type init functions");
    generateSectionHeader(utilFuncDefs, "Type init functions");
    generateInitFuncs();
    utilFuncDecls << "\n";
    utilFuncDefs << "\n";
    cout << "  > Generating print funcs\n";
    generateSectionHeader(utilFuncDecls, "Type print functions");
    generateSectionHeader(utilFuncDefs, "Type print functions");
    generatePrintFuncs();
    utilFuncDecls << "\n";
    utilFuncDefs << "\n";
    cout << "  > Generating copy funcs\n";
    generateSectionHeader(utilFuncDecls, "Type copy functions");
    generateSectionHeader(utilFuncDefs, "Type copy functions");
    generateCopyFuncs();
    utilFuncDecls << "\n";
    utilFuncDefs << "\n";
    cout << "  > Generating array allocation funcs\n";
    generateSectionHeader(utilFuncDecls, "Type alloc functions");
    generateSectionHeader(utilFuncDefs, "Type alloc functions");
    generateAllocFuncs();
    utilFuncDecls << "\n";
    utilFuncDefs << "\n";
    cout << "  > Generating free funcs\n";
    generateSectionHeader(utilFuncDecls, "Type free functions");
    generateSectionHeader(utilFuncDefs, "Type free functions");
    generateDeallocFuncs();
    utilFuncDecls << "\n";
    utilFuncDefs << "\n";
    cout << "  > Generating Onyx subroutines\n";
    generateSectionHeader(funcDecls, "Functions and Procedures");
    generateSectionHeader(funcDefs, "Functions and Procedures");
    genSubroutines();
    cout << "  > Done, writing everything to C source\n";
    c = ofstream(cName);
    c << "//--- " << outputStem << ".c, generated by the Onyx Compiler ---//\n\n";
    //genCommon writes directly to the c stream
    genCommon();
    //write types, vars, func decls, func defs in the ostringstreams
    c.write(typeDecls.str().c_str(), typeDecls.tellp());
    c << "\n\n";
    c.write(varDecls.str().c_str(), varDecls.tellp());
    c << "\n\n";
    c.write(utilFuncDecls.str().c_str(), utilFuncDecls.tellp());
    c << "\n\n";
    c.write(utilFuncDefs.str().c_str(), utilFuncDefs.tellp());
    c << "\n\n";
    c.write(funcDecls.str().c_str(), funcDecls.tellp());
    c << "\n\n";
    c.write(funcDefs.str().c_str(), funcDefs.tellp());
    c << '\n';
    c.close();
    //wait for cc to terminate
    bool compileSuccess = runCommand(string("gcc") + " --std=c99 -Os -ffast-math -fassociative-math -o " + exeName + ' ' + cName + " &> /dev/null");
    if(!keep)
    {
      remove(cName.c_str());
    }
    if(!compileSuccess)
    {
      ERR_MSG("C compiler encountered error.");
    }
  }

  void genCommon()
  {
    c << "#include \"stdio.h\"\n";
    c << "#include \"stdlib.h\"\n";
    c << "#include \"math.h\"\n";
    c << "#include \"string.h\"\n";
    c << "#include \"stdint.h\"\n";
    c << "#include \"stdbool.h\"\n";
    c << '\n';
    c << "char* strdup_(const char* str) \n";
    c << "{\n";
    c << "char* temp = malloc(1 + strlen(str)); \n";
    c << "strcpy(temp, str);\n";
    c << "return temp;\n";
    c << "}\n\n";
  }

  void genTypeDecls()
  {
    //A list of all singular types (every type except arrays)
    vector<Type*> allTypes;
    for(auto prim : TypeSystem::primitives)
    {
      allTypes.push_back(prim);
    }
    walkScopeTree([&] (Scope* s) -> void
      {
        for(auto t : s->names)
        {
          switch(t.second.kind)
          {
          //don't process TYPEDEF here because alias is never used directly
            case Name::STRUCT:
            case Name::BOUNDED_TYPE:
            case Name::ENUM:
              allTypes.push_back((Type*) t.second.item);
              break;
          }
        }
      });
    for(auto tt : TypeSystem::tuples)
    {
      allTypes.push_back(tt);
    }
    size_t nonArrayTypes = allTypes.size();
    for(size_t i = 0; i < nonArrayTypes; i++)
    {
      for(auto arrType : allTypes[i]->dimTypes)
      {
        allTypes.push_back(arrType);
      }
    }
    //primitives (string is a struct, all others are C primitives)
    types[TypeSystem::primNames["void"]] = "void";
    types[TypeSystem::primNames["bool"]] = "bool";
    types[TypeSystem::primNames["char"]] = "char";
    types[TypeSystem::primNames["byte"]] = "int8_t";
    types[TypeSystem::primNames["ubyte"]] = "uint8_t";
    types[TypeSystem::primNames["short"]] = "int16_t";
    types[TypeSystem::primNames["ushort"]] = "uint16_t";
    types[TypeSystem::primNames["int"]] = "int32_t";
    types[TypeSystem::primNames["uint"]] = "uint32_t";
    types[TypeSystem::primNames["long"]] = "int64_t";
    types[TypeSystem::primNames["ulong"]] = "uint64_t";
    types[TypeSystem::primNames["float"]] = "float";
    types[TypeSystem::primNames["double"]] = "double";
    //forward-declare all compound types
    for(auto t : allTypes)
    {
      if(t->isPrimitive())
      {
        //primitives are already implemented (done above)
        typesImplemented[t] = true;
      }
      else
      {
        //get an identifier for type t
        string ident = getIdentifier();
        types[t] = ident;
        typesImplemented[t] = false;
        //forward-declare the type
        typeDecls << "typedef struct " << ident << ' ' << ident << "; //" << t->getName() << '\n';
      }
    }
    typeDecls << '\n';
    //implement all compound types
    for(auto t : allTypes)
    {
      if(!t->isPrimitive() && !typesImplemented[t])
      {
        generateCompoundType(typeDecls, types[t], t);
      }
    }
    typeDecls << '\n';
  }

  void genGlobals()
  {
    int numGlobals = 0;
    walkScopeTree([&] (Scope* s) -> void
      {
        //only care about vars in module scope
        if(dynamic_cast<ModuleScope*>(s))
        {
          for(auto v : s->vars)
          {
            string ident = getIdentifier();
            vars[v] = ident;
            varDecls << types[v->type] << " " << ident << "; //" << v->name << '\n';
            numGlobals = 0;
          }
        }
      });
    if(numGlobals)
    {
      varDecls << '\n';
    }
  }

  void genSubroutines()
  {
    //forward-declare all subroutines
    walkScopeTree([&] (Scope* s) -> void
      {
        for(auto sub : s->subr)
        {
          string ident;
          //main() is the only subroutine with a special name
          if(sub->name == "main")
            ident = "main";
          else
            ident = getIdentifier();
          subrs[sub] = ident;
          //all C functions except main are static to save time when linking
          if(ident != "main")
            funcDecls << "static ";
          funcDecls << types[sub->retType] << ' ' << ident << '(';
          for(auto arg : sub->argVars)
          {
            if(arg != sub->argVars.front())
            {
              funcDecls << ", ";
            }
            string argName = getIdentifier();
            vars[arg] = ident;
            funcDecls << types[arg->type] << ' ' << argName;
          }
          funcDecls << ");\n";
        }
      });
    //implement all subroutines
    walkScopeTree([&] (Scope* s) -> void
      {
        for(auto sub : s->subr)
        {
          funcDefs << types[sub->retType] << ' ' << subrs[sub] << '(';
          for(auto arg : sub->argVars)
          {
            if(arg != sub->argVars.front())
            {
              funcDefs << ", ";
            }
            string argName = getIdentifier();
            vars[arg] = argName;
            funcDefs << types[arg->type] << ' ' << argName;
          }
          funcDefs << ")\n";
          generateBlock(funcDefs, sub->body);
        }
      });
  }

  void generateExpression(ostream& c, Expression* expr)
  {
    //Expressions in C mostly depend on the subclass of expr
    if(UnaryArith* unary = dynamic_cast<UnaryArith*>(expr))
    {
      c << '(';
      c << operatorTable[unary->op];
      c << '(';
      generateExpression(c, unary->expr);
      c << ')';
      c << ')';
    }
    else if(BinaryArith* binary = dynamic_cast<BinaryArith*>(expr))
    {
      //fully parenthesize binary exprs so that it works
      //in case onyx ends up with different precedence than C
      c << "((";
      generateExpression(c, binary->lhs);
      c << ')';
      c << operatorTable[binary->op];
      c << '(';
      generateExpression(c, binary->rhs);
      c << "))";
    }
    else if(IntLiteral* intLit = dynamic_cast<IntLiteral*>(expr))
    {
      //all int literals are unsigned
      c << intLit->value << "U";
      if(intLit->value >= 0xFFFFFFFF)
      {
        c << "ULL";
      }
    }
    else if(FloatLiteral* floatLit = dynamic_cast<FloatLiteral*>(expr))
    {
      //all float lits have type double, so never use "f" suffix
      c << floatLit->value;
    }
    else if(StringLiteral* stringLit = dynamic_cast<StringLiteral*>(expr))
    {
      //generate a char[] struct using C struct literal
      c << "((" << types[TypeSystem::primNames["char"]->getArrayType(1)] << ") {" << stringLit->value.length() << ", strdup_(\"";
      //generate the characters of the string literal one at a time, using escapes as needed
      for(char ch : stringLit->value)
      {
        c << generateChar(ch);
      }
      c << "\")})";
    }
    else if(CharLiteral* charLit = dynamic_cast<CharLiteral*>(expr))
    {
      c << '\'';
      c << generateChar(charLit->value);
      c << '\'';
    }
    else if(BoolLiteral* boolLit = dynamic_cast<BoolLiteral*>(expr))
    {
      if(boolLit->value)
        c << "true";
      else
        c << "false";
    }
    else if(Indexed* indexed = dynamic_cast<Indexed*>(expr))
    {
      //Indexed expression must be either a tuple or array
      auto indexedType = indexed->group->type;
      if(ArrayType* at = dynamic_cast<ArrayType*>(indexedType))
      {
        auto subtype = at->subtype;
        if(subtype->isArray())
        {
          c << "((" << types[indexedType] << ") {";
          //add all dimensions, except highest
          for(int dim = 1; dim < at->dims; dim++)
          {
            generateExpression(c, indexed->group);
            c << ".dim" << dim << ", ";
          }
          //now add the data pointer from expr, but with offset
          generateExpression(c, indexed->group);
          c << ".data + ";
          generateExpression(c, indexed->index);
          //offset is produce of index and all lesser dimensions
          for(int dim = 1; dim < at->dims; dim++)
          {
            c << " * (";
            generateExpression(c, indexed->group);
            c << ".dim" << dim << ")";
          }
          c << "})";
        }
        else
        {
          //just index into data
          c << '(';
          generateExpression(c, indexed->group);
          c << ".data[";
          generateExpression(c, indexed->index);
          c << "])";
        }
      }
      else if(dynamic_cast<TupleType*>(indexedType))
      {
        //tuple: simply reference the requested member
        c << '(';
        generateExpression(c, indexed->group);
        //index must be an IntLiteral (has already been checked)
        c << ").mem" << dynamic_cast<IntLiteral*>(indexed)->value << ')';
      }
    }
    else if(CallExpr* call = dynamic_cast<CallExpr*>(expr))
    {
      c << call->subr << '(';
      for(auto arg : call->args)
      {
        generateExpression(c, arg);
      }
      c << ')';
    }
    else if(VarExpr* var = dynamic_cast<VarExpr*>(expr))
    {
      c << vars[var->var];
    }
    else if(NewArray* na = dynamic_cast<NewArray*>(expr))
    {
      //call the new array function with na's dimensions
      c << getAllocFunc(na->type) << '(';
      for(size_t i = 0; i < na->dims.size(); i++)
      {
        generateExpression(c, na->dims[i]);
        if(i != na->dims.size() - 1)
          c << ", ";
      }
      c << ')';
    }
    else if(TempVar* tv = dynamic_cast<TempVar*>(expr))
    {
      //in C code, this is just the temporary variable's name
      c << tv->ident;
    }
    else
    {
      //compound literal, or anything else that hasn't been covered
      INTERNAL_ERROR;
    }
  }

  void generateBlock(ostream& c, Block* b)
  {
    c << "{\n";
    //introduce local variables
    for(auto local : b->scope->vars)
    {
      string localIdent = getIdentifier();
      vars[local] = localIdent;
      c << types[local->type] << ' ' << localIdent << ";\n";
    }
    for(auto blockStmt : b->stmts)
    {
      generateStatement(c, b, blockStmt);
    }
    c << "}\n";
  }

  void generateStatement(ostream& c, Block* b, Statement* stmt)
  {
    //get the type of statement
    if(Block* blk = dynamic_cast<Block*>(stmt))
    {
      generateBlock(c, blk);
    }
    else if(Assign* a = dynamic_cast<Assign*>(stmt))
    {
      generateAssignment(c, b, a->lvalue, a->rvalue);
    }
    else if(CallStmt* cs = dynamic_cast<CallStmt*>(stmt))
    {
      c << subrs[cs->called] << '(';
      for(size_t i = 0; i < cs->args.size(); i++)
      {
        if(i > 0)
        {
          c << ", ";
        }
        generateExpression(c, cs->args[i]);
      }
      c << ");\n";
    }
    else if(For* f = dynamic_cast<For*>(stmt))
    {
      c << "for(";
      generateStatement(c, b, f->init);
      generateExpression(c, f->condition);
      generateStatement(c, b, f->increment);
      c << ")\n";
      generateBlock(c, f->loopBlock);
    }
    else if(While* w = dynamic_cast<While*>(stmt))
    {
      c << "while(";
      generateExpression(c, w->condition);
      c << ")\n";
      c << "{\n";
      generateBlock(c, w->loopBlock);
      c << "}\n";
    }
    else if(If* ii = dynamic_cast<If*>(stmt))
    {
      c << "if(";
      generateExpression(c, ii->condition);
      c << ")\n{\n";
      generateStatement(c, b, ii->body);
      c << "}\n";
    }
    else if(IfElse* ie = dynamic_cast<IfElse*>(stmt))
    {
      c << "if(";
      generateExpression(c, ie->condition);
      c << ")\n";
      generateStatement(c, b, ie->trueBody);
      c << "else\n";
      generateStatement(c, b, ie->falseBody);
    }
    else if(Return* r = dynamic_cast<Return*>(stmt))
    {
      if(r->value)
      {
        c << "return ";
        generateExpression(c, r->value);
        c << ";\n";
      }
      else
      {
        c << "return;\n";
      }
    }
    else if(dynamic_cast<Break*>(stmt))
    {
      c << "break;\n";
    }
    else if(dynamic_cast<Continue*>(stmt))
    {
      c << "continue;\n";
    }
    else if(Print* p = dynamic_cast<Print*>(stmt))
    {
      //call printf on the expression
      for(size_t i = 0; i < p->exprs.size(); i++)
      {
        c << getPrintFunc(p->exprs[i]->type) << '(';
        generateExpression(c, p->exprs[i]);
        c << ");\n";
      }
    }
    else if(Assertion* assertion = dynamic_cast<Assertion*>(stmt))
    {
      c << "if(";
      generateExpression(c, assertion->asserted);
      c << ")\n";
      c << "{\n";
      c << "puts(\"Assertion failed.\");\n";
      c << "exit(1);\n";
      c << "}\n";
    }
  }

  void generateAssignment(ostream& c, Block* b, Expression* lhs, Expression* rhs)
  {
    //generateExpression can't be used with compound literals, so
    //  any case where LHS and/or RHS are compound literals needs to be handled separately
    //LHS is compound literal:
    //  -RHS can be another compound lit, or anything else is tuple, struct
    //LHS is variable or indexed:
    //  -RHS can be anything that matches type
    if(dynamic_cast<CallExpr*>(clRHS))
    {
      //regardless of the types of lhs and rhs,
      //make sure subroutine only gets called once by saving return value
      c << "{\n";
      string tempName = getIdentifier();
      TempVar temp(tempName, lhs->type, b->scope);
      //now assign temp to lhs
      generateAssignment(c, b, lhs, &temp);
      c << "}\n";
    }
    else if(auto clLHS = dynamic_cast<CompoundLiteral*>(lhs))
    {
      //only compound literals, tuples and structs may be assigned to a compound literal
      if(auto clRHS = dynamic_cast<CompoundLiteral*>(rhs))
      {
        //copy members directly, one at a time
        for(size_t i = 0; i < clLHS->members.size(); i++)
        {
          generateAssignment(c, b, clLHS->members[i], clRHS->members[i]);
        }
      }
      else if(clRHS->type->isTuple())
      {
        auto tt = dynamic_cast<TupleType*>(clRHS->type);
        for(size_t i = 0; i < clLHS->members.size(); i++)
        {
          //create tuple index
          IntLiteral index(i);
          Indexed rhsMember(b->scope, rhs, &index);
          generateAssignment(c, b, clLHS->members[i], rhsMember);
        }
      }
      else if(clRHS->type->isStruct())
      {
        //generate assignment for each member
        auto st = dynamic_cast<StructType*>(clRHS->type);
        for(size_t i = 0; i < clLHS->members.size(); i++)
        {
          Indexed rhsMember(b->scope, rhs, &index);
          generateAssignment(c, b, clLHS->members[i], rhsMember);
        }
      }
    }
    else if(auto clRHS = dynamic_cast<CompoundLiteral*>(rhs))
    {
    }
    else
    {
      //direct assignment of one expression to another, where neither
      //lhs nor rhs are CompoundLiterals and rhs is not a subroutine call
      //  -call free on lhs before assignment (if necessary for its type)
      //  -if rhs is assignable, it is persistent, so need to deep copy
      //  -if rhs is not persistent, can shallow copy it
      if(lhs->assignable() && needsDealloc(lhs->type))
      {
        c << getDeallocFunc(lhs->type) << "(";
        generateExpression(c, lhs);
        c << ");\n";
      }
      if(rhs->assignable())
      {
        generateExpression(c, lhs);
        c << " = " << getCopyFunc(rhs->type) << "(";
        generateExpression(c, rhs);
        c << ");\n";
      }
      else
      {
        generateExpression(c, lhs);
        c << " = ";
        generateExpression(c, rhs);
        c << ";";
      }
    }
  }

  void generateInitFuncs()
  {
    for(auto type : types)
    {
      Type* t = type.first;
      string func = getInitFunc(t);
      string typeName = type.second;
      utilFuncDecls << typeName << ' ' << func << "();\n";
      utilFuncDefs << typeName << ' ' << func << "()\n{\n";
      if(t->isNumber() || t->isChar())
      {
        utilFuncDefs << "return 0;\n";
      }
      else if(t->isBool())
      {
        utilFuncDefs << "return false;\n";
      }
      else if(t->isStruct() || t->isTuple())
      {
        auto st = dynamic_cast<StructType*>(t);
        auto tt = dynamic_cast<TupleType*>(t);
        utilFuncDefs << typeName << " temp_;\n";
        if(st)
        {
          for(size_t i = 0; i < st->members.size(); i++)
          {
            utilFuncDefs << "temp_." << st->memberNames[i] << " = " << getInitFunc(st->members[i]) << "();\n";
          }
        }
        else
        {
          for(size_t i = 0; i < tt->members.size(); i++)
          {
            utilFuncDefs << "temp_.mem" << i << " = " << getInitFunc(tt->members[i]) << "();\n";
          }
        }
        utilFuncDefs << "return temp_;\n";
      }
      else if(t->isArray())
      {
        //empty array doesn't need any allocation (leave data null)
        utilFuncDefs << "return ((" << typeName << ") {0, NULL});\n";
      }
      else if(t->isUnion())
      {
        utilFuncDefs << "return ((" << typeName << ") {NULL, 0});\n";
      }
      utilFuncDefs << "}\n";
    }
  }

  void generateCopyFuncs()
  {
    for(auto type : types)
    {
      Type* t = type.first;
      if(t->isVoid())
        continue;
      string& typeName = type.second;
      //only ArrayTypes (and anything containing an array type) require nontrivial copy
      string func = getCopyFunc(t);
      {
        Oss prototype;
        prototype << typeName << ' ' << func << '(' << typeName << " data_)";
        utilFuncDecls << prototype.str() << ";\n";
        utilFuncDefs << prototype.str() << "\n{\n";
      }
      //note: void doesn't get a copy function because it will never be called
      //cannot have variable or argument of type void (checked in middle end)
      if(!t->isVoid() && t->isPrimitive())
      {
        //primitives (integers, bool, are always trivially copyable
        utilFuncDefs << "return data_;\n";
      }
      else if(auto at = dynamic_cast<ArrayType*>(t))
      {
        string& subtype = types[at->subtype];
        utilFuncDefs << subtype << "* temp_ = malloc(sizeof(" << subtype << ") * data_.dim);\n";
        utilFuncDefs << "for(" << size_type << " i_ = 0; i_ < data_.dim; i_++)\n{\n";
        utilFuncDefs << "temp_[i_] = " << getCopyFunc(at->subtype) << "(data_.data[i_]);\n";
        utilFuncDefs << "}\n";
        utilFuncDefs << "return ((" << typeName << ") {data_.dim, temp_});\n";
      }
      else if(auto st = dynamic_cast<StructType*>(t))
      {
        utilFuncDefs << typeName << " temp_;\n";
        for(size_t i = 0; i < st->members.size(); i++)
        {
          utilFuncDefs << "temp_." << st->memberNames[i] << " = " << getCopyFunc(st->members[i]) << "(data_." << st->memberNames[i] << ");\n";
        }
        utilFuncDefs << "return temp_;\n";
      }
      else if(auto ut = dynamic_cast<UnionType*>(t))
      {
        utilFuncDefs << typeName << " temp_;\n";
        utilFuncDefs << "temp_.option = data_.option;\n";
        utilFuncDefs << "switch(data_.option)\n";
        for(size_t i = 0; i < ut->options.size(); i++)
        {
          utilFuncDefs << "case " << i << ":\n";
          //allocate space in temp
          string& optionType = types[ut->options[i]];
          utilFuncDefs << "temp_.data = malloc(sizeof(" << optionType << ");\n";
          //deep copy data_'s underlying type into temp_
          utilFuncDefs << "*((" << optionType << "*) temp_.data) = " << getCopyFunc(ut->options[i]) << "(*((" << optionType << "*) data_.data));\n";
          utilFuncDefs << "break;\n";
        }
      }
      else if(auto tt = dynamic_cast<TupleType*>(t))
      {
        //like struct, copy one member at a time
        utilFuncDefs << typeName << " temp_;\n";
        for(size_t i = 0; i < tt->members.size(); i++)
        {
          utilFuncDefs << "temp_.mem" << i << " = " << getCopyFunc(tt->members[i]) << "(data_.mem" << i << ");\n";
        }
        utilFuncDefs << "return temp_;\n";
      }
      utilFuncDefs << "}\n";
    }
  }

  void generateAllocFuncs()
  {
    for(auto type : types)
    {
      ArrayType* at = dynamic_cast<ArrayType*>(type.first);
      if(at)
      {
        int ndims = at->dims;
        string typeName = type.second;
        string func = getAllocFunc(at);
        vector<string> dimArgs;
        {
          Oss prototype;
          prototype << typeName << ' ' << func << '(';
          //add a uniquely named size_type argument for each dimension
          for(int i = 0; i < ndims; i++)
          {
            dimArgs.push_back(getIdentifier());
            prototype << size_type << ' ' << dimArgs.back();
            if(i != ndims - 1)
            {
              prototype << ", ";
            }
          }
          prototype << ')';
          utilFuncDecls << prototype.str();
          utilFuncDecls << ";\n";
          utilFuncDefs << prototype.str();
          utilFuncDefs << "\n{\n";
        }
        //add prototype to both util decls and defs
        //allocate an array of the subtype
        string& subtype = types[at->subtype];
        utilFuncDefs << subtype << "* temp_ = malloc(sizeof(" << subtype << ") * " << dimArgs[0] << ");\n";
        if(ndims > 1)
        {
          //if subtype is an array type, call the allocation function for it with all the dimensions except the first
          utilFuncDefs << "for(" << size_type << " i_ = 0; i_ < " << dimArgs[0] << "; i_++)\n{\n";
          utilFuncDefs << "temp_[i_] = " << getAllocFunc(at->subtype) << '(';
          for(int i = 1; i < ndims; i++)
          {
            utilFuncDefs << dimArgs[i];
            if(i != ndims - 1)
            {
              utilFuncDefs << ", ";
            }
          }
          utilFuncDefs << ");\n";
          utilFuncDefs << "}\n";
        }
        else
        {
          //if subtype is not an array, call the initialization function for it
          utilFuncDefs << "for(" << size_type << " i_ = 0; i_ < " << dimArgs[0] << "; i_++)\n{\n";
          utilFuncDefs << "temp_[i_] = " << getInitFunc(at->subtype) << "();\n";
          utilFuncDefs << "}\n";
        }
        utilFuncDefs << "}\n";
      }
    }
  }

  bool typeNeedsDealloc(TypeSystem::Type* t)
  {
    //lazily populate needsDealloc
    auto it = needsDealloc.find(t);
    if(it == needsDealloc.end())
    {
      bool value = false;
      if(t->isPrimitive())
      {
        value = false;
      }
      else if(auto st = dynamic_cast<StructType*>(t))
      {
        for(auto mem : st->members)
        {
          if(typeNeedsDealloc(mem))
          {
            value = true;
            break;
          }
        }
      }
      else if(auto tt = dynamic_cast<TupleType*>(t))
      {
        for(auto mem : tt->members)
        {
          if(typeNeedsDealloc(mem))
          {
            value = true;
            break;
          }
        }
      }
      else if(auto ut = dynamic_cast<UnionType*>(t))
      {
        value = true;
      }
      else if(auto at = dynamic_cast<ArrayType*>(t))
      {
        value = true;
      }
      needsDealloc[t] = value;
      return value;
    }
    return it->second;
  }

  void generateDeallocFuncs()
  {
    for(auto type : types)
    {
      if(typeNeedsDealloc(type.first))
      {
        auto t = type.first;
        string& typeName = type.second;
        string func = getDeallocFunc(t);
        //only struct, tuple, array and unions need to be freed
        utilFuncDecls << "void " << func << "(" << typeName << " data_);\n";
        utilFuncDefs << "inline void " << func << "(" << typeName << " data_)\n{\n";
        if(auto st = dynamic_cast<StructType*>(t))
        {
          for(size_t i = 0; i < st->members.size(); i++)
          {
            if(typeNeedsDealloc(st->members[i]))
            {
              utilFuncDefs << getDeallocFunc(st->members[i]) << "(data_." << st->memberNames[i] << ");\n";
            }
          }
        }
        else if(auto tt = dynamic_cast<TupleType*>(t))
        {
          for(size_t i = 0; i < tt->members.size(); i++)
          {
            if(typeNeedsDealloc(tt->members[i]))
            {
              utilFuncDefs << getDeallocFunc(tt->members[i]) << "(data_.mem" << i << ");\n";
            }
          }
        }
        else if(auto ut = dynamic_cast<UnionType*>(t))
        {
          utilFuncDefs << "switch(data_.option)\n{\n";
          for(size_t i = 0; i < ut->options.size(); i++)
          {
            utilFuncDefs << "case " << i << ":\n";
            if(typeNeedsDealloc(ut->options[i]))
            {
              utilFuncDefs << getDeallocFunc(ut->options[i]) << "(*((" << types[ut->options[i]] << "*) data_.data));\n";
            }
            utilFuncDefs << "break;\n";
          }
          utilFuncDefs << "free(data_.data);\n";
          utilFuncDefs << "}\n";
        }
        else if(auto at = dynamic_cast<ArrayType*>(t))
        {
          utilFuncDefs << "if(data_.data != NULL)\n{\n";
          //add free calls for each element, if subtype has nontrivial deallocator
          if(typeNeedsDealloc(at->subtype))
          {
            utilFuncDefs << "for(size_t i_ = 0; i_ < data_.dim; i_++)\n{\n";
            utilFuncDefs << getDeallocFunc(at->subtype) << "(data_.data[i_]);\n";
            utilFuncDefs << "}\n";
          }
          utilFuncDefs << "free(data_.data);\n";
          utilFuncDefs << "}\n";
        }
        utilFuncDefs << "}\n";
      }
    }
  }

  void generatePrintFuncs()
  {
    for(auto type : types)
    {
      Type* t = type.first;
      if(t->isVoid())
        continue;
      string& typeName = type.second;
      string func = getPrintFunc(t);
      utilFuncDecls << "void " << func << "(" << typeName << " data_);\n";
      utilFuncDefs << "void " << func << "(" << typeName << " data_)\n{\n";
      if(t->isPrimitive() && !t->isBool())
      {
        //all primitives (except bool) can be printed as a printf call with a single %
        //so just determine the %format
        string fmt;
        if(t->isInteger())
        {
          auto intType = dynamic_cast<IntegerType*>(t);
          //printf format code
          switch(intType->size)
          {
            case 1:
              fmt = intType->isSigned ? "hhd" : "hhu";
              break;
            case 2:
              fmt = intType->isSigned ? "hd" : "hu";
              break;
            case 4:
              fmt = intType->isSigned ? "d" : "u";
              break;
            case 8:
              fmt = intType->isSigned ? "lld" : "llu";
              break;
            default:
              INTERNAL_ERROR;
          }
        }
        else if(t->isChar())
        {
          fmt = "c";
        }
        else if(t->isFloat())
        {
          fmt = "f";
        }
        utilFuncDefs << "printf(\"%" << fmt << "\", data_);\n";
      }
      else if(t->isBool())
      {
        utilFuncDefs << "if(data_)\nprintf(\"true\");\nelse\nprintf(\"false\");\n";
      }
      else
      {
        //compound types
        if(ArrayType* at = dynamic_cast<ArrayType*>(t))
        {
          if(at->subtype->isChar())
          {
            //t is string, so write it to stdout all at once
            utilFuncDefs << "fwrite(data_.data, 1, data_.dim, stdout);\n";
          }
          else
          {
            utilFuncDefs << "putchar('{');\n";
            utilFuncDefs << "for(uint64_t count_ = 0; ";
            utilFuncDefs << "count_ < data_.dim; count_++)\n{\n";
            utilFuncDefs << getPrintFunc(at->subtype) << "(data_.data[count_]);\n}\n";
            utilFuncDefs << "putchar('}');\n";
          }
        }
        else if(TupleType* tt = dynamic_cast<TupleType*>(t))
        {
          utilFuncDefs << "putchar('(');\n";
          //print each member, comma separated
          for(size_t i = 0; i < tt->members.size(); i++)
          {
            utilFuncDefs << getPrintFunc(tt->members[i]) << "(data_.mem" << i << ");\n";
            if(i != tt->members.size() - 1)
            {
              utilFuncDefs << "printf(\", \");\n";
            }
          }
          utilFuncDefs << "putchar(')');\n";
        }
        else if(StructType* st = dynamic_cast<StructType*>(t))
        {
          utilFuncDefs << "printf(\"" << st->getName() << " {\");\n";
          //print each member, comma separated
          for(size_t i = 0; i < st->members.size(); i++)
          {
            utilFuncDefs << getPrintFunc(st->members[i]) << "(data_." << st->memberNames[i] << ");\n";
            if(i != st->members.size() - 1)
            {
              utilFuncDefs << "printf(\", \");\n";
            }
          }
          utilFuncDefs << "putchar(')');\n";
        }
        else if(UnionType* ut = dynamic_cast<UnionType*>(t))
        {
          utilFuncDefs << "printf(\"" << ut->getName() << " @%i\", data_.option);\n";
          utilFuncDefs << "switch(data_.option)\n{\n";
          for(size_t i = 0; i < ut->options.size(); i++)
          {
            utilFuncDefs << "case " << i << ":\n";
            utilFuncDefs << getPrintFunc(ut->options[i]) << "(*((" << types[ut->options[i]] << ") data_.data));\n";
            utilFuncDefs << "break;\n";
          }
          utilFuncDefs << "default:;\n";
          utilFuncDefs << "}\n";
        }
      }
      utilFuncDefs << "}\n";
    }
  }

  string getIdentifier()
  {
    //use a base-36 encoding of identCount using 0-9 A-Z
    char buf[32];
    buf[31] = 0;
    auto val = identCount;
    int iter = 30;
    for(;; iter--)
    {
      int digit = val % 36;
      if(digit < 10)
      {
        buf[iter] = '0' + digit;
      }
      else
      {
        buf[iter] = 'A' + (digit - 10);
      }
      val /= 36;
      if(val == 0)
        break;
    }
    //now buf + iter is the string
    identCount++;
    return string("o") + (buf + iter) + '_';
  }

  template<typename F>
  void walkScopeTree(F f)
  {
    vector<Scope*> visit;
    visit.push_back(global);
    while(visit.size())
    {
      Scope* s = visit.back();
      f(s);
      visit.pop_back();
      for(auto child : s->children)
      {
        visit.push_back(child);
      }
    }
  }

  void generateCompoundType(ostream& c, string cName, TypeSystem::Type* t)
  {
    auto at = dynamic_cast<ArrayType*>(t);
    auto st = dynamic_cast<StructType*>(t);
    auto ut = dynamic_cast<UnionType*>(t);
    auto tt = dynamic_cast<TupleType*>(t);
    auto et = dynamic_cast<EnumType*>(t);
    //first, make sure all necessary types have already been defined
    if(at)
    {
      if(!typesImplemented[at->elem])
      {
        generateCompoundType(c, types[at->elem], at->elem);
      }
    }
    else if(st)
    {
      for(auto mem : st->members)
      {
        if(!typesImplemented[mem])
        {
          generateCompoundType(c, types[mem], mem);
        }
      }
    }
    else if(tt)
    {
      for(auto mem : tt->members)
      {
        if(!typesImplemented[mem])
        {
          generateCompoundType(c, types[mem], mem);
        }
      }
    }
    if(et)
    {
      //enum type always represented as signed integer
      c << "typedef int" << 8 * et->bytes << "_t " << cName << ";\n";
    }
    else
    {
      //open a struct declaration
      c << "struct " << cName << "\n{\n";
      if(at)
      {
        //add dims
        c << size_type << " dim;\n";
        //add pointer to element type
        c << types[at->subtype] << "* data;\n";
      }
      else if(st)
      {
        //add all members (as pointer)
        //  since there is no possible name collision among the member names, don't
        //  need to replace them with mangled identifiers
        for(size_t i = 0; i < st->members.size(); i++)
        {
          c << types[st->members[i]] << ' ' << st->memberNames[i] << ";\n";
        }
      }
      else if(ut)
      {
        c << "void* data;\n";
        c << "int option;\n";
      }
      else if(tt)
      {
        for(size_t i = 0; i < tt->members.size(); i++)
        {
          //tuple members are anonymous so just use memN as the name
          c << types[tt->members[i]] << " mem" << i << ";\n";
        }
      }
      c << "};\n";
    }
    typesImplemented[t] = true;
  }

  string getPrintFunc(Type* t)
  {
    return "print_" + types[t] + '_';
  }

  string getInitFunc(Type* t)
  {
    return "init_" + types[t] + '_';
  }

  string getCopyFunc(Type* t)
  {
    return "copy_" + types[t] + '_';
  }

  string getAllocFunc(Type* t)
  {
    return "alloc_" + types[t] + '_';
  }

  string getDeallocFunc(TypeSystem::Type* t)
  {
    return "free_" + types[t] + '_';
  }

  void generateSectionHeader(ostream& c, string name)
  {
    c << "//////////////////////////////\n";
    int space = 13 - name.length() / 2;
    c << "//";
    for(int i = 0; i < space; i++)
      c << ' ';
    c << name;
    for(int i = 2 + space + name.length(); i < 28; i++)
      c << ' ';
    c << "//\n";
    c << "//////////////////////////////\n\n";
  }
}

