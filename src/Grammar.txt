//------------//
//Onyx grammar//
//------------//

//  Custom grammar language:
//    Different rules for a nonterminal are on different lines, indented
//    o before string literal means operator
//    p means punctuation
//    k means keyword
//    (), {}, [] can nest
//    () groups
//    {} means any number
//    [] means optional
//    | means or
//    Idents and literals are terminals

// Punctuation is discarded when constructing the AST 
// ModuleDef is the type of the AST root; a program is a module

Module:
  k"module" Ident p"{" ModuleDef p"}"

ModuleDef:
  {ScopedDecl}

ScopedDecl:
  Module
  VarDecl
  StructDecl
  VariantDecl
  TraitDecl
  Enum
  Typedef
  FuncDecl
  FuncDef
  ProcDecl
  ProcDef
  TestDecl

Type:
  Member
  k"void"
  k"bool"
  k"char"
  k"uchar"
  k"short"
  k"ushort"
  k"int"
  k"uint"
  k"long"
  k"ulong"
  k"float"
  k"double"
  k"string"
  //n-dimensional array
  Type {p"[" p"]"}
  //tuple
  TupleType

Statement:
  ScopedDecl
  VarAssign
  Print
  Expression p";"
  Block
  Return
  Continue
  Break
  Switch
  For
  While
  If
  Using
  Assertion
  EmptyStatement

TupleType:
  p"(" Type {p"," Type} p")"

EmptyStatement:
  p";"

Typedef:
  k"typedef" Type Ident

Return:
  k"return" [Expression] p";"

Continue:
  k"continue" p";"

Break:
  k"break" p";"

Switch:
  k"switch" p"(" Expression p")" p"{" {k"case" Expression p":" Statement} [k"default" p":" Statement] p:}"

For:
  (ForC | ForRange1 | ForRange2 | ForArray) Statement

ForC:
  k"for" p"(" VarDecl Expression p";" VarAssign p")"

ForRange1:
  k"for" Expression

ForRange2:
  k"for" Expression p":" Expression

ForArray
  k"for" Member

While:
  k"while" p"(" Expression p")" Statement

If:
  k"if" p"(" Expression p")" Statement

Using:
  k"using" Member p";"

Assertion:
  k"assert" Expression p";"

TestDecl:
  k"test" Call p";"

Enum:
  k"enum" Ident p"{" [Ident [o"=" IntLit] {p"," Ident [o"=" IntLit]} p"}"

Block:
  p"{" {Statement} p"}"

VarDecl:
  Type Ident p";"
  Type Ident o"=" Expression p";"
  k"auto" Ident o"=" Expression p";"

VarAssign:
  Member o"=" Expression p";"
  Member o"++" p";"
  Member o"--" p";"
  Member o"+=" Expression p";"
  Member o"-=" Expression p";"
  Member o"*=" Expression p";"
  Member o"/=" Expression p";"
  Member o"%=" Expression p";"
  Member o"&=" Expression p";"
  Member o"^=" Expression p";"
  Member o"|=" Expression p";"

Print:
  k"print" p"(" Expression {p"," Expression} p")" p";"

Expression:
  Call
  Expr1

Call:
  Member p"(" [{Expression p","} [Expression]] p")"

Arg:
  Type | TraitType [Ident]

Args:
  {Arg}

FuncDecl:
  k"func" Type Ident p"(" Args p")" p";"

FuncDef:
  k"func" Type Member p"(" Args p")" Block

FuncType:
  k"functype" Type Member p"(" Args p")"

ProcDecl:
  [k"nonterm"] k"proc" Type Ident p"(" Args p")" p";"

ProcDef:
  [k"nonterm"] k"proc" Type Member p"(" Args p")" Block

ProcType:
  [k"nonterm"] k"proctype" Type Member p"(" Args p")"

StructDecl:
  k"struct" [p":" Ident {p"," Ident}] p"{" {([p"^"] VarDecl) | FuncDecl | FuncDef | ProcDecl | ProcDef} p"}"

VariantDecl:
  k"variant" Ident p"{" Type {p"," Type} p"}"

ArrayLit:
  p"{" [Expression {p"," Expression}] p"}"

StructLit:
  p"{" [Expression {p"," Expression}] p"}"

Error:
  k"error"

Member:
  Ident
  Member p"." Ident
 
TraitType:
  Ident p":" Ident

TraitDecl:
  k"trait" Ident p"{" {FuncDecl | ProcDecl} p"}"

BoolLit:
  k"true"
  k"false"

//Use ExprN to handle orders of precedence (lower N = lower precedence)

Expr1:
  Expr2 {Expr1RHS}

Expr1RHS:
  o"||" Expr2

Expr2:
  Expr3 {Expr2RHS}

Expr2RHS:
  o"&&" Expr3

Expr3:
  Expr4 {Expr3RHS}

Expr3RHS:
  o"|" Expr4

Expr4:
  Expr5 {Expr4RHS}

Expr4RHS:
  o"^" Expr5

Expr5:
  Expr6 {Expr5RHS}

Expr5RHS:
  o"&" Expr6

Expr6:
  Expr7 {Expr6RHS}

Expr6RHS:
  o"==" Expr7
  o"!=" Expr7

Expr7:
  Expr8 {Expr7RHS}

Expr7RHS:
  o"<" Expr8
  o">" Expr8
  o"<=" Expr8
  o">=" Expr8

Expr8:
  Expr9 {Expr8RHS}

Expr8RHS:
  o">>" Expr9
  o"<<" Expr9

Expr9:
  Expr10 {Expr9RHS}

Expr9RHS:
  o"+" Expr10
  o"-" Expr10

Expr10:
  Expr11 {Expr10RHS}

Expr10RHS:
  o"*" Expr11
  o"/" Expr11
  o"%" Expr11

Expr11:
  Expr12 {Expr11RHS}

Expr11RHS:
  o"-" Expr12
  o"!" Expr12
  o"~" Expr12

Expr12
  p"(" Expression p")"
  IntLit
  BoolLit
  CharLit
  StrLit
  FloatLit
  StructLit
  ArrayLit
  Member
  Error

