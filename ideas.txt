Goals for Hackathon

-Everything is "local" to its function, and non-borrowed malloc'd things are deleted within function as soon as possible
-(Later) this may allow for custom allocator that is like a stack and extremely fast

-When are pointers used in C?
  -Pass by "reference": resolve by doing Rust-like borrow (const or non), will affect parallelization later
  -Allocating things: resolve by automatically choosing stack vs. heap allocation

-No pointers. Pass by value (deep copy of all struct members), ref (allows modification of original), or const ref
-No explicit constructor/destructor: memory is always owned by a function, and struct literals allow construction of simple structs
-Array types with [], support up to 3D arrays
-Arrays are fat pointers: int dims, int i, int j, int k
-Array not pointer to pointers: instead a single buffer with multiply to calculate offsets
ex:
  byte checkerboard[8][8];
-for loops nicer with arrays

for(checkerboard)
{
  //automatically orders loops for best cache performance (row major) and provides i, j, k and it, jt and kt
  //don't let users use those as identifiers
}

-Universal special print function, variadic and specialized at compile time

-No header files, for now combine sources into single C translation unit 
-Later minimally recompile using diff on source
-Nested comments supported
-Int types (keywords): char, short, int, long, uchar, ushort, uint, ulong
-also defined (keywords): s8, s16, s32, s64 and u8, u16, u32 and u64
-string a primitive type. Fat pointer implementation for O(1) len, cat.
-Write unit tests inline

-----------------------------------------------------------------------------------------

-Major differences from C++:
  -Need to scan through input once to build a table of special types (array specializations)
  -Generate headers for C++ to read:
    -types.hpp: struct definitions for array specializations
    -functions.hpp (included after types): function prototypes for all obsidian functions, in no particular order
  -Include the two generated headers, plus standard library headers
  -print is special, not a regular function, must be converted to one or more cout calls

